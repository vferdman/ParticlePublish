
c:/Users/Vladimir/Documents/Particle_IO/Photon/Publish/target/Publish.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b98  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000004  40024000  080a1bb0  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .data         00000078  20000300  080a1bb4  00020300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000594  20000378  20000378  00030378  2**2
                  ALLOC
  5 .module_info_suffix 00000028  080a1c2c  080a1c2c  00021c2c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  080a1c54  080a1c54  00021c54  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   00099ae0  00000000  00000000  00021c58  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000e189  00000000  00000000  000bb738  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0001262f  00000000  00000000  000c98c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001d30  00000000  00000000  000dbef0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00002ff0  00000000  00000000  000ddc20  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00022cdf  00000000  00000000  000e0c10  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001f75a  00000000  00000000  001038ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00096be3  00000000  00000000  00123049  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000b368  00000000  00000000  001b9c2c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0018 <user_part_module>:
 80a0018:	c8 18 0a 08                                         ....

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <module_user_pre_init+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <module_user_pre_init+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f001 fbeb 	bl	80a1808 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <module_user_pre_init+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <module_user_pre_init+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f001 fbf0 	bl	80a181e <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <module_user_pre_init+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000300 	.word	0x20000300
 80a0048:	080a1bb4 	.word	0x080a1bb4
 80a004c:	20000378 	.word	0x20000378
 80a0050:	20000378 	.word	0x20000378
 80a0054:	2000090c 	.word	0x2000090c
 80a0058:	2000090c 	.word	0x2000090c

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f000 fd43 	bl	80a0ae8 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a1b7c 	.word	0x080a1b7c
 80a0084:	080a1bac 	.word	0x080a1bac

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b82a 	b.w	80a00e0 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f933 	bl	80a02f8 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f000 bce9 	b.w	80a0a6c <_post_loop>

080a009a <_Znwj>:
 80a009a:	f000 baf5 	b.w	80a0688 <malloc>

080a009e <_ZdlPv>:
 80a009e:	f000 bafb 	b.w	80a0698 <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr

080a00b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a00b2:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80a00b4:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a00b6:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 80a00b8:	b17c      	cbz	r4, 80a00da <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a00ba:	6863      	ldr	r3, [r4, #4]
 80a00bc:	3b01      	subs	r3, #1
 80a00be:	6063      	str	r3, [r4, #4]
 80a00c0:	b95b      	cbnz	r3, 80a00da <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 80a00c2:	6823      	ldr	r3, [r4, #0]
 80a00c4:	4620      	mov	r0, r4
 80a00c6:	689b      	ldr	r3, [r3, #8]
 80a00c8:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a00ca:	68a3      	ldr	r3, [r4, #8]
 80a00cc:	3b01      	subs	r3, #1
 80a00ce:	60a3      	str	r3, [r4, #8]
 80a00d0:	b91b      	cbnz	r3, 80a00da <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a00d2:	6823      	ldr	r3, [r4, #0]
 80a00d4:	4620      	mov	r0, r4
 80a00d6:	68db      	ldr	r3, [r3, #12]
 80a00d8:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 80a00da:	4628      	mov	r0, r5
 80a00dc:	bd38      	pop	{r3, r4, r5, pc}
	...

080a00e0 <setup>:

#define REPORT_INTERVAL 500
int loopCount = REPORT_INTERVAL;  // interval at wich to report photoresistor value


void setup() {
 80a00e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  pinMode(led,OUTPUT); // Our LED pin is output (lighting up the LED)
 80a00e4:	4d79      	ldr	r5, [pc, #484]	; (80a02cc <setup+0x1ec>)
  pinMode(boardLed,OUTPUT); // Our on-board LED is output as well
 80a00e6:	4c7a      	ldr	r4, [pc, #488]	; (80a02d0 <setup+0x1f0>)

#define REPORT_INTERVAL 500
int loopCount = REPORT_INTERVAL;  // interval at wich to report photoresistor value


void setup() {
 80a00e8:	b089      	sub	sp, #36	; 0x24
  pinMode(led,OUTPUT); // Our LED pin is output (lighting up the LED)
  pinMode(boardLed,OUTPUT); // Our on-board LED is output as well
  pinMode(photoresistor,INPUT);  // Our photoresistor pin is input (reading the photoresistor)
 80a00ea:	4f7a      	ldr	r7, [pc, #488]	; (80a02d4 <setup+0x1f4>)
#define REPORT_INTERVAL 500
int loopCount = REPORT_INTERVAL;  // interval at wich to report photoresistor value


void setup() {
  pinMode(led,OUTPUT); // Our LED pin is output (lighting up the LED)
 80a00ec:	8828      	ldrh	r0, [r5, #0]
 80a00ee:	2101      	movs	r1, #1
 80a00f0:	f001 f990 	bl	80a1414 <pinMode>
  pinMode(boardLed,OUTPUT); // Our on-board LED is output as well
  pinMode(photoresistor,INPUT);  // Our photoresistor pin is input (reading the photoresistor)
  pinMode(power,OUTPUT); // The pin powering the photoresistor is output (sending out consistent power)
 80a00f4:	4e78      	ldr	r6, [pc, #480]	; (80a02d8 <setup+0x1f8>)
int loopCount = REPORT_INTERVAL;  // interval at wich to report photoresistor value


void setup() {
  pinMode(led,OUTPUT); // Our LED pin is output (lighting up the LED)
  pinMode(boardLed,OUTPUT); // Our on-board LED is output as well
 80a00f6:	8820      	ldrh	r0, [r4, #0]
 80a00f8:	2101      	movs	r1, #1
 80a00fa:	f001 f98b 	bl	80a1414 <pinMode>
  pinMode(photoresistor,INPUT);  // Our photoresistor pin is input (reading the photoresistor)
 80a00fe:	8838      	ldrh	r0, [r7, #0]
 80a0100:	2100      	movs	r1, #0
 80a0102:	f001 f987 	bl	80a1414 <pinMode>
  pinMode(power,OUTPUT); // The pin powering the photoresistor is output (sending out consistent power)
 80a0106:	8830      	ldrh	r0, [r6, #0]
 80a0108:	2101      	movs	r1, #1
 80a010a:	f001 f983 	bl	80a1414 <pinMode>

  // Next, write the power of the photoresistor to be the maximum possible, which is 4095 in analog.
  digitalWrite(power,HIGH);
 80a010e:	8830      	ldrh	r0, [r6, #0]
 80a0110:	2101      	movs	r1, #1
 80a0112:	f001 f990 	bl	80a1436 <digitalWrite>

  // Start by calibrating our photoresistor.
  // This one is going to require some input from the user!

  // First, the D7 LED will go on to tell you to put your hand in front of the beam.
  digitalWrite(boardLed,HIGH);
 80a0116:	2101      	movs	r1, #1
 80a0118:	8820      	ldrh	r0, [r4, #0]
 80a011a:	f001 f98c 	bl	80a1436 <digitalWrite>
  delay(5000);
 80a011e:	f241 3088 	movw	r0, #5000	; 0x1388
 80a0122:	f000 fc41 	bl	80a09a8 <delay>

  // Then, the D7 LED will go off and the LED will turn on.
  digitalWrite(boardLed,LOW);
 80a0126:	8820      	ldrh	r0, [r4, #0]
 80a0128:	2100      	movs	r1, #0
 80a012a:	f001 f984 	bl	80a1436 <digitalWrite>
  digitalWrite(led,HIGH);
 80a012e:	2101      	movs	r1, #1
 80a0130:	8828      	ldrh	r0, [r5, #0]
 80a0132:	f001 f980 	bl	80a1436 <digitalWrite>
  delay(500);
 80a0136:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a013a:	f000 fc35 	bl	80a09a8 <delay>

  // Now we'll take some readings...
  int off_1 = analogRead(photoresistor); // read photoresistor
 80a013e:	8838      	ldrh	r0, [r7, #0]
 80a0140:	f001 f992 	bl	80a1468 <analogRead>
 80a0144:	4680      	mov	r8, r0
  delay(200); // wait 200 milliseconds
 80a0146:	20c8      	movs	r0, #200	; 0xc8
 80a0148:	f000 fc2e 	bl	80a09a8 <delay>
  int off_2 = analogRead(photoresistor); // read photoresistor
 80a014c:	8838      	ldrh	r0, [r7, #0]
 80a014e:	f001 f98b 	bl	80a1468 <analogRead>
 80a0152:	4605      	mov	r5, r0
  delay(300); // wait 300 milliseconds
 80a0154:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80a0158:	f000 fc26 	bl	80a09a8 <delay>

  // Now flash to let us know that you've taken the readings...
  digitalWrite(boardLed,HIGH);
 80a015c:	2101      	movs	r1, #1
 80a015e:	8820      	ldrh	r0, [r4, #0]
 80a0160:	f001 f969 	bl	80a1436 <digitalWrite>
  delay(500);
 80a0164:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a0168:	f000 fc1e 	bl	80a09a8 <delay>
  digitalWrite(boardLed,LOW);
 80a016c:	2100      	movs	r1, #0
 80a016e:	8820      	ldrh	r0, [r4, #0]
 80a0170:	f001 f961 	bl	80a1436 <digitalWrite>
  delay(500);
 80a0174:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a0178:	f000 fc16 	bl	80a09a8 <delay>
  digitalWrite(boardLed,HIGH);
 80a017c:	2101      	movs	r1, #1
 80a017e:	8820      	ldrh	r0, [r4, #0]
 80a0180:	f001 f959 	bl	80a1436 <digitalWrite>
  delay(500);
 80a0184:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a0188:	f000 fc0e 	bl	80a09a8 <delay>
  digitalWrite(boardLed,LOW);
 80a018c:	2100      	movs	r1, #0
 80a018e:	8820      	ldrh	r0, [r4, #0]
 80a0190:	f001 f951 	bl	80a1436 <digitalWrite>
  delay(500);
 80a0194:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a0198:	f000 fc06 	bl	80a09a8 <delay>

  // Now the D7 LED will go on to tell you to remove your hand...
  digitalWrite(boardLed,HIGH);
 80a019c:	2101      	movs	r1, #1
 80a019e:	8820      	ldrh	r0, [r4, #0]
 80a01a0:	f001 f949 	bl	80a1436 <digitalWrite>
  delay(3000);
 80a01a4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80a01a8:	f000 fbfe 	bl	80a09a8 <delay>

  // The D7 LED will turn off...
  digitalWrite(boardLed,LOW);
 80a01ac:	2100      	movs	r1, #0
 80a01ae:	8820      	ldrh	r0, [r4, #0]
 80a01b0:	f001 f941 	bl	80a1436 <digitalWrite>

  // ...And we will take two more readings.
  int on_1 = analogRead(photoresistor); // read photoresistor
 80a01b4:	8838      	ldrh	r0, [r7, #0]
 80a01b6:	f001 f957 	bl	80a1468 <analogRead>
 80a01ba:	4681      	mov	r9, r0
  delay(200); // wait 200 milliseconds
 80a01bc:	20c8      	movs	r0, #200	; 0xc8
 80a01be:	f000 fbf3 	bl	80a09a8 <delay>
  int on_2 = analogRead(photoresistor); // read photoresistor
 80a01c2:	8838      	ldrh	r0, [r7, #0]
 80a01c4:	f001 f950 	bl	80a1468 <analogRead>
 80a01c8:	4606      	mov	r6, r0
  delay(1000); // wait 1 second
 80a01ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a01ce:	f000 fbeb 	bl	80a09a8 <delay>

  // Now flash the D7 LED on and off three times to let us know that we're ready to go!
  digitalWrite(boardLed,HIGH);
 80a01d2:	2101      	movs	r1, #1
 80a01d4:	8820      	ldrh	r0, [r4, #0]
 80a01d6:	f001 f92e 	bl	80a1436 <digitalWrite>
  delay(500);
 80a01da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a01de:	f000 fbe3 	bl	80a09a8 <delay>
  digitalWrite(boardLed,LOW);
 80a01e2:	2100      	movs	r1, #0
 80a01e4:	8820      	ldrh	r0, [r4, #0]
 80a01e6:	f001 f926 	bl	80a1436 <digitalWrite>
  delay(500);
 80a01ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a01ee:	f000 fbdb 	bl	80a09a8 <delay>
  digitalWrite(boardLed,HIGH);
 80a01f2:	2101      	movs	r1, #1
 80a01f4:	8820      	ldrh	r0, [r4, #0]
 80a01f6:	f001 f91e 	bl	80a1436 <digitalWrite>
  delay(500);
 80a01fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a01fe:	f000 fbd3 	bl	80a09a8 <delay>
  digitalWrite(boardLed,LOW);
 80a0202:	2100      	movs	r1, #0
 80a0204:	8820      	ldrh	r0, [r4, #0]
 80a0206:	f001 f916 	bl	80a1436 <digitalWrite>
  delay(500);
 80a020a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a020e:	f000 fbcb 	bl	80a09a8 <delay>
  digitalWrite(boardLed,HIGH);
 80a0212:	2101      	movs	r1, #1
 80a0214:	8820      	ldrh	r0, [r4, #0]
 80a0216:	f001 f90e 	bl	80a1436 <digitalWrite>
  delay(500);
 80a021a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a021e:	f000 fbc3 	bl	80a09a8 <delay>
  digitalWrite(boardLed,LOW);
 80a0222:	8820      	ldrh	r0, [r4, #0]
 80a0224:	2100      	movs	r1, #0
 80a0226:	f001 f906 	bl	80a1436 <digitalWrite>


  // Now we average the "on" and "off" values to get an idea of what the resistance will be when the LED is on and off
  intactValue = (on_1+on_2)/2;
  brokenValue = (off_1+off_2)/2;
 80a022a:	4445      	add	r5, r8
  delay(500);
  digitalWrite(boardLed,LOW);


  // Now we average the "on" and "off" values to get an idea of what the resistance will be when the LED is on and off
  intactValue = (on_1+on_2)/2;
 80a022c:	2302      	movs	r3, #2
 80a022e:	eb09 0106 	add.w	r1, r9, r6
 80a0232:	fb91 f1f3 	sdiv	r1, r1, r3
  brokenValue = (off_1+off_2)/2;
 80a0236:	fb95 f0f3 	sdiv	r0, r5, r3
 80a023a:	4e28      	ldr	r6, [pc, #160]	; (80a02dc <setup+0x1fc>)

  // Let's also calculate the value between ledOn and ledOff, above which we will assume the led is on and below which we assume the led is off.
  beamThreshold = (intactValue+brokenValue)/2;
 80a023c:	4d28      	ldr	r5, [pc, #160]	; (80a02e0 <setup+0x200>)
  digitalWrite(boardLed,LOW);


  // Now we average the "on" and "off" values to get an idea of what the resistance will be when the LED is on and off
  intactValue = (on_1+on_2)/2;
  brokenValue = (off_1+off_2)/2;
 80a023e:	6030      	str	r0, [r6, #0]

  // Let's also calculate the value between ledOn and ledOff, above which we will assume the led is on and below which we assume the led is off.
  beamThreshold = (intactValue+brokenValue)/2;
 80a0240:	4408      	add	r0, r1
 80a0242:	fb90 f0f3 	sdiv	r0, r0, r3
  delay(500);
  digitalWrite(boardLed,LOW);


  // Now we average the "on" and "off" values to get an idea of what the resistance will be when the LED is on and off
  intactValue = (on_1+on_2)/2;
 80a0246:	4a27      	ldr	r2, [pc, #156]	; (80a02e4 <setup+0x204>)
 80a0248:	4c27      	ldr	r4, [pc, #156]	; (80a02e8 <setup+0x208>)
 80a024a:	6011      	str	r1, [r2, #0]
  brokenValue = (off_1+off_2)/2;

  // Let's also calculate the value between ledOn and ledOff, above which we will assume the led is on and below which we assume the led is off.
  beamThreshold = (intactValue+brokenValue)/2;
 80a024c:	6028      	str	r0, [r5, #0]


  // Send a publish...
  Particle.publish("Intact Value",String(intactValue),60,PRIVATE);
 80a024e:	220a      	movs	r2, #10
 80a0250:	a804      	add	r0, sp, #16
 80a0252:	f000 fb28 	bl	80a08a6 <_ZN6StringC1Eih>
 80a0256:	7823      	ldrb	r3, [r4, #0]
        return publish(eventName, eventData, 60, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a0258:	9a04      	ldr	r2, [sp, #16]
 80a025a:	4924      	ldr	r1, [pc, #144]	; (80a02ec <setup+0x20c>)
 80a025c:	f88d 3000 	strb.w	r3, [sp]
 80a0260:	a802      	add	r0, sp, #8
 80a0262:	233c      	movs	r3, #60	; 0x3c
 80a0264:	f000 fd8a 	bl	80a0d7c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a0268:	a803      	add	r0, sp, #12
 80a026a:	f7ff ff22 	bl	80a00b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a026e:	a804      	add	r0, sp, #16
 80a0270:	f000 fac1 	bl	80a07f6 <_ZN6StringD1Ev>
  Particle.publish("Broken Value",String(brokenValue),60,PRIVATE);
 80a0274:	6831      	ldr	r1, [r6, #0]
 80a0276:	220a      	movs	r2, #10
 80a0278:	a804      	add	r0, sp, #16
 80a027a:	f000 fb14 	bl	80a08a6 <_ZN6StringC1Eih>
 80a027e:	7823      	ldrb	r3, [r4, #0]
 80a0280:	9a04      	ldr	r2, [sp, #16]
 80a0282:	491b      	ldr	r1, [pc, #108]	; (80a02f0 <setup+0x210>)
 80a0284:	f88d 3000 	strb.w	r3, [sp]
 80a0288:	a802      	add	r0, sp, #8
 80a028a:	233c      	movs	r3, #60	; 0x3c
 80a028c:	f000 fd76 	bl	80a0d7c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80a0290:	a803      	add	r0, sp, #12
 80a0292:	f7ff ff0e 	bl	80a00b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0296:	a804      	add	r0, sp, #16
 80a0298:	f000 faad 	bl	80a07f6 <_ZN6StringD1Ev>
  Particle.publish("Beam Threshold",String(beamThreshold),60,PRIVATE);
 80a029c:	6829      	ldr	r1, [r5, #0]
 80a029e:	220a      	movs	r2, #10
 80a02a0:	a804      	add	r0, sp, #16
 80a02a2:	f000 fb00 	bl	80a08a6 <_ZN6StringC1Eih>
 80a02a6:	7823      	ldrb	r3, [r4, #0]
 80a02a8:	9a04      	ldr	r2, [sp, #16]
 80a02aa:	4912      	ldr	r1, [pc, #72]	; (80a02f4 <setup+0x214>)
 80a02ac:	f88d 3000 	strb.w	r3, [sp]
 80a02b0:	a802      	add	r0, sp, #8
 80a02b2:	233c      	movs	r3, #60	; 0x3c
 80a02b4:	f000 fd62 	bl	80a0d7c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80a02b8:	a803      	add	r0, sp, #12
 80a02ba:	f7ff fefa 	bl	80a00b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a02be:	a804      	add	r0, sp, #16
 80a02c0:	f000 fa99 	bl	80a07f6 <_ZN6StringD1Ev>

}
 80a02c4:	b009      	add	sp, #36	; 0x24
 80a02c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a02ca:	bf00      	nop
 80a02cc:	20000384 	.word	0x20000384
 80a02d0:	20000300 	.word	0x20000300
 80a02d4:	2000030c 	.word	0x2000030c
 80a02d8:	20000304 	.word	0x20000304
 80a02dc:	2000038c 	.word	0x2000038c
 80a02e0:	2000037c 	.word	0x2000037c
 80a02e4:	20000380 	.word	0x20000380
 80a02e8:	20000388 	.word	0x20000388
 80a02ec:	080a18dc 	.word	0x080a18dc
 80a02f0:	080a18e9 	.word	0x080a18e9
 80a02f4:	080a18f6 	.word	0x080a18f6

080a02f8 <loop>:

//
// Main Loop
//

void loop() {
 80a02f8:	b530      	push	{r4, r5, lr}
  When the status of the beam changes, we'll send a Particle.publish() to the cloud
  so that if we want to, we can check from other devices when the LED is on or off.

  We'll also turn the D7 LED on when the Photoresistor detects a beam breakagse.
  */
  photoresistorValue = analogRead(photoresistor);
 80a02fa:	4b2a      	ldr	r3, [pc, #168]	; (80a03a4 <loop+0xac>)

//
// Main Loop
//

void loop() {
 80a02fc:	b089      	sub	sp, #36	; 0x24
  When the status of the beam changes, we'll send a Particle.publish() to the cloud
  so that if we want to, we can check from other devices when the LED is on or off.

  We'll also turn the D7 LED on when the Photoresistor detects a beam breakagse.
  */
  photoresistorValue = analogRead(photoresistor);
 80a02fe:	8818      	ldrh	r0, [r3, #0]
 80a0300:	f001 f8b2 	bl	80a1468 <analogRead>
  
  // report the value if the interval has passed
  if (loopCount-- == 0) {
 80a0304:	4c28      	ldr	r4, [pc, #160]	; (80a03a8 <loop+0xb0>)
  When the status of the beam changes, we'll send a Particle.publish() to the cloud
  so that if we want to, we can check from other devices when the LED is on or off.

  We'll also turn the D7 LED on when the Photoresistor detects a beam breakagse.
  */
  photoresistorValue = analogRead(photoresistor);
 80a0306:	4605      	mov	r5, r0
  
  // report the value if the interval has passed
  if (loopCount-- == 0) {
 80a0308:	6823      	ldr	r3, [r4, #0]
 80a030a:	1e5a      	subs	r2, r3, #1
 80a030c:	6022      	str	r2, [r4, #0]
 80a030e:	b9bb      	cbnz	r3, 80a0340 <loop+0x48>
    Particle.publish("Photoresistor Value",String(photoresistorValue),60,PRIVATE);
 80a0310:	4601      	mov	r1, r0
 80a0312:	220a      	movs	r2, #10
 80a0314:	a804      	add	r0, sp, #16
 80a0316:	f000 fac6 	bl	80a08a6 <_ZN6StringC1Eih>
 80a031a:	4b24      	ldr	r3, [pc, #144]	; (80a03ac <loop+0xb4>)
 80a031c:	9a04      	ldr	r2, [sp, #16]
 80a031e:	781b      	ldrb	r3, [r3, #0]
 80a0320:	4923      	ldr	r1, [pc, #140]	; (80a03b0 <loop+0xb8>)
 80a0322:	f88d 3000 	strb.w	r3, [sp]
 80a0326:	a802      	add	r0, sp, #8
 80a0328:	233c      	movs	r3, #60	; 0x3c
 80a032a:	f000 fd27 	bl	80a0d7c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80a032e:	a803      	add	r0, sp, #12
 80a0330:	f7ff febf 	bl	80a00b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0334:	a804      	add	r0, sp, #16
 80a0336:	f000 fa5e 	bl	80a07f6 <_ZN6StringD1Ev>
    loopCount = REPORT_INTERVAL;
 80a033a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80a033e:	6023      	str	r3, [r4, #0]
  }

  if (photoresistorValue>beamThreshold) {
 80a0340:	4b1c      	ldr	r3, [pc, #112]	; (80a03b4 <loop+0xbc>)
 80a0342:	4c1d      	ldr	r4, [pc, #116]	; (80a03b8 <loop+0xc0>)
 80a0344:	681b      	ldr	r3, [r3, #0]
 80a0346:	429d      	cmp	r5, r3
    This flag monitors the current status of the beam.
    After the beam is broken, it is set TRUE
    and when the beam reconnects it is set to FALSE.
    */

    if (beamBroken==true) {
 80a0348:	7823      	ldrb	r3, [r4, #0]
  if (loopCount-- == 0) {
    Particle.publish("Photoresistor Value",String(photoresistorValue),60,PRIVATE);
    loopCount = REPORT_INTERVAL;
  }

  if (photoresistorValue>beamThreshold) {
 80a034a:	dd14      	ble.n	80a0376 <loop+0x7e>
    This flag monitors the current status of the beam.
    After the beam is broken, it is set TRUE
    and when the beam reconnects it is set to FALSE.
    */

    if (beamBroken==true) {
 80a034c:	b343      	cbz	r3, 80a03a0 <loop+0xa8>
 80a034e:	4b17      	ldr	r3, [pc, #92]	; (80a03ac <loop+0xb4>)
 80a0350:	4a1a      	ldr	r2, [pc, #104]	; (80a03bc <loop+0xc4>)
 80a0352:	781b      	ldrb	r3, [r3, #0]
 80a0354:	491a      	ldr	r1, [pc, #104]	; (80a03c0 <loop+0xc8>)
 80a0356:	f88d 3000 	strb.w	r3, [sp]
 80a035a:	a804      	add	r0, sp, #16
 80a035c:	233c      	movs	r3, #60	; 0x3c
 80a035e:	f000 fd0d 	bl	80a0d7c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80a0362:	a805      	add	r0, sp, #20
 80a0364:	f7ff fea5 	bl	80a00b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        // We will send a publish to the cloud and turn the LED on.

        // Send a publish to your devices...
        Particle.publish("beamStatus","intact",60,PRIVATE);
        // And flash the on-board LED on and off.
        digitalWrite(boardLed,LOW);
 80a0368:	4b16      	ldr	r3, [pc, #88]	; (80a03c4 <loop+0xcc>)
 80a036a:	2100      	movs	r1, #0
 80a036c:	8818      	ldrh	r0, [r3, #0]
 80a036e:	f001 f862 	bl	80a1436 <digitalWrite>

        // Finally, set the flag to reflect the current status of the beam.
        beamBroken=false;
 80a0372:	2300      	movs	r3, #0
 80a0374:	e013      	b.n	80a039e <loop+0xa6>
    }
  }
  else {
      // If you are below the threshold, the beam is probably broken.
      if (beamBroken==false) {
 80a0376:	b99b      	cbnz	r3, 80a03a0 <loop+0xa8>
 80a0378:	4b0c      	ldr	r3, [pc, #48]	; (80a03ac <loop+0xb4>)
 80a037a:	4a13      	ldr	r2, [pc, #76]	; (80a03c8 <loop+0xd0>)
 80a037c:	781b      	ldrb	r3, [r3, #0]
 80a037e:	4910      	ldr	r1, [pc, #64]	; (80a03c0 <loop+0xc8>)
 80a0380:	f88d 3000 	strb.w	r3, [sp]
 80a0384:	a804      	add	r0, sp, #16
 80a0386:	233c      	movs	r3, #60	; 0x3c
 80a0388:	f000 fcf8 	bl	80a0d7c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80a038c:	a805      	add	r0, sp, #20
 80a038e:	f7ff fe90 	bl	80a00b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

        // Send a publish...
        Particle.publish("beamStatus","broken",60,PRIVATE);
        // And flash the on-board LED on and off.
        digitalWrite(boardLed,HIGH);
 80a0392:	4b0c      	ldr	r3, [pc, #48]	; (80a03c4 <loop+0xcc>)
 80a0394:	2101      	movs	r1, #1
 80a0396:	8818      	ldrh	r0, [r3, #0]
 80a0398:	f001 f84d 	bl	80a1436 <digitalWrite>

        // Finally, set the flag to reflect the current status of the beam.
        beamBroken=true;
 80a039c:	2301      	movs	r3, #1
 80a039e:	7023      	strb	r3, [r4, #0]
      }
  }
}
 80a03a0:	b009      	add	sp, #36	; 0x24
 80a03a2:	bd30      	pop	{r4, r5, pc}
 80a03a4:	2000030c 	.word	0x2000030c
 80a03a8:	20000308 	.word	0x20000308
 80a03ac:	20000388 	.word	0x20000388
 80a03b0:	080a1905 	.word	0x080a1905
 80a03b4:	2000037c 	.word	0x2000037c
 80a03b8:	20000390 	.word	0x20000390
 80a03bc:	080a1919 	.word	0x080a1919
 80a03c0:	080a1920 	.word	0x080a1920
 80a03c4:	20000300 	.word	0x20000300
 80a03c8:	080a192b 	.word	0x080a192b

080a03cc <_GLOBAL__sub_I_led>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a03cc:	4b02      	ldr	r3, [pc, #8]	; (80a03d8 <_GLOBAL__sub_I_led+0xc>)
 80a03ce:	2201      	movs	r2, #1
 80a03d0:	701a      	strb	r2, [r3, #0]
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a03d2:	f000 b803 	b.w	80a03dc <HAL_Pin_Map>
 80a03d6:	bf00      	nop
 80a03d8:	20000388 	.word	0x20000388

080a03dc <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
 80a03dc:	b508      	push	{r3, lr}
 80a03de:	4b02      	ldr	r3, [pc, #8]	; (80a03e8 <HAL_Pin_Map+0xc>)
 80a03e0:	681b      	ldr	r3, [r3, #0]
 80a03e2:	681b      	ldr	r3, [r3, #0]
 80a03e4:	9301      	str	r3, [sp, #4]
 80a03e6:	bd08      	pop	{r3, pc}
 80a03e8:	080601b0 	.word	0x080601b0

080a03ec <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80a03ec:	b508      	push	{r3, lr}
 80a03ee:	4b02      	ldr	r3, [pc, #8]	; (80a03f8 <HAL_Validate_Pin_Function+0xc>)
 80a03f0:	681b      	ldr	r3, [r3, #0]
 80a03f2:	685b      	ldr	r3, [r3, #4]
 80a03f4:	9301      	str	r3, [sp, #4]
 80a03f6:	bd08      	pop	{r3, pc}
 80a03f8:	080601b0 	.word	0x080601b0

080a03fc <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a03fc:	b508      	push	{r3, lr}
 80a03fe:	4b02      	ldr	r3, [pc, #8]	; (80a0408 <HAL_Pin_Mode+0xc>)
 80a0400:	681b      	ldr	r3, [r3, #0]
 80a0402:	689b      	ldr	r3, [r3, #8]
 80a0404:	9301      	str	r3, [sp, #4]
 80a0406:	bd08      	pop	{r3, pc}
 80a0408:	080601b0 	.word	0x080601b0

080a040c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a040c:	b508      	push	{r3, lr}
 80a040e:	4b02      	ldr	r3, [pc, #8]	; (80a0418 <HAL_Get_Pin_Mode+0xc>)
 80a0410:	681b      	ldr	r3, [r3, #0]
 80a0412:	68db      	ldr	r3, [r3, #12]
 80a0414:	9301      	str	r3, [sp, #4]
 80a0416:	bd08      	pop	{r3, pc}
 80a0418:	080601b0 	.word	0x080601b0

080a041c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a041c:	b508      	push	{r3, lr}
 80a041e:	4b02      	ldr	r3, [pc, #8]	; (80a0428 <HAL_GPIO_Write+0xc>)
 80a0420:	681b      	ldr	r3, [r3, #0]
 80a0422:	691b      	ldr	r3, [r3, #16]
 80a0424:	9301      	str	r3, [sp, #4]
 80a0426:	bd08      	pop	{r3, pc}
 80a0428:	080601b0 	.word	0x080601b0

080a042c <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
 80a042c:	b508      	push	{r3, lr}
 80a042e:	4b02      	ldr	r3, [pc, #8]	; (80a0438 <HAL_ADC_Read+0xc>)
 80a0430:	681b      	ldr	r3, [r3, #0]
 80a0432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0434:	9301      	str	r3, [sp, #4]
 80a0436:	bd08      	pop	{r3, pc}
 80a0438:	080601b0 	.word	0x080601b0

080a043c <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a043c:	b508      	push	{r3, lr}
 80a043e:	4b02      	ldr	r3, [pc, #8]	; (80a0448 <HAL_SPI_Init+0xc>)
 80a0440:	681b      	ldr	r3, [r3, #0]
 80a0442:	69db      	ldr	r3, [r3, #28]
 80a0444:	9301      	str	r3, [sp, #4]
 80a0446:	bd08      	pop	{r3, pc}
 80a0448:	080601b4 	.word	0x080601b4

080a044c <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a044c:	b508      	push	{r3, lr}
 80a044e:	4b02      	ldr	r3, [pc, #8]	; (80a0458 <HAL_SPI_Is_Enabled+0xc>)
 80a0450:	681b      	ldr	r3, [r3, #0]
 80a0452:	6a1b      	ldr	r3, [r3, #32]
 80a0454:	9301      	str	r3, [sp, #4]
 80a0456:	bd08      	pop	{r3, pc}
 80a0458:	080601b4 	.word	0x080601b4

080a045c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a045c:	b508      	push	{r3, lr}
 80a045e:	4b02      	ldr	r3, [pc, #8]	; (80a0468 <HAL_RNG_GetRandomNumber+0xc>)
 80a0460:	681b      	ldr	r3, [r3, #0]
 80a0462:	685b      	ldr	r3, [r3, #4]
 80a0464:	9301      	str	r3, [sp, #4]
 80a0466:	bd08      	pop	{r3, pc}
 80a0468:	0806019c 	.word	0x0806019c

080a046c <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a046c:	b508      	push	{r3, lr}
 80a046e:	4b02      	ldr	r3, [pc, #8]	; (80a0478 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a0470:	681b      	ldr	r3, [r3, #0]
 80a0472:	695b      	ldr	r3, [r3, #20]
 80a0474:	9301      	str	r3, [sp, #4]
 80a0476:	bd08      	pop	{r3, pc}
 80a0478:	0806019c 	.word	0x0806019c

080a047c <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
 80a047c:	b508      	push	{r3, lr}
 80a047e:	4b02      	ldr	r3, [pc, #8]	; (80a0488 <HAL_Core_Get_Last_Reset_Info+0xc>)
 80a0480:	681b      	ldr	r3, [r3, #0]
 80a0482:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a0484:	9301      	str	r3, [sp, #4]
 80a0486:	bd08      	pop	{r3, pc}
 80a0488:	080601b8 	.word	0x080601b8

080a048c <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a048c:	b508      	push	{r3, lr}
 80a048e:	4b02      	ldr	r3, [pc, #8]	; (80a0498 <os_mutex_create+0xc>)
 80a0490:	681b      	ldr	r3, [r3, #0]
 80a0492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0494:	9301      	str	r3, [sp, #4]
 80a0496:	bd08      	pop	{r3, pc}
 80a0498:	080601d0 	.word	0x080601d0

080a049c <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a049c:	b508      	push	{r3, lr}
 80a049e:	4b02      	ldr	r3, [pc, #8]	; (80a04a8 <HAL_USART_Init+0xc>)
 80a04a0:	681b      	ldr	r3, [r3, #0]
 80a04a2:	699b      	ldr	r3, [r3, #24]
 80a04a4:	9301      	str	r3, [sp, #4]
 80a04a6:	bd08      	pop	{r3, pc}
 80a04a8:	080601c4 	.word	0x080601c4

080a04ac <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a04ac:	b508      	push	{r3, lr}
 80a04ae:	4b02      	ldr	r3, [pc, #8]	; (80a04b8 <HAL_USART_Write_Data+0xc>)
 80a04b0:	681b      	ldr	r3, [r3, #0]
 80a04b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a04b4:	9301      	str	r3, [sp, #4]
 80a04b6:	bd08      	pop	{r3, pc}
 80a04b8:	080601c4 	.word	0x080601c4

080a04bc <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a04bc:	b508      	push	{r3, lr}
 80a04be:	4b02      	ldr	r3, [pc, #8]	; (80a04c8 <HAL_USART_Available_Data+0xc>)
 80a04c0:	681b      	ldr	r3, [r3, #0]
 80a04c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a04c4:	9301      	str	r3, [sp, #4]
 80a04c6:	bd08      	pop	{r3, pc}
 80a04c8:	080601c4 	.word	0x080601c4

080a04cc <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a04cc:	b508      	push	{r3, lr}
 80a04ce:	4b02      	ldr	r3, [pc, #8]	; (80a04d8 <HAL_USART_Read_Data+0xc>)
 80a04d0:	681b      	ldr	r3, [r3, #0]
 80a04d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a04d4:	9301      	str	r3, [sp, #4]
 80a04d6:	bd08      	pop	{r3, pc}
 80a04d8:	080601c4 	.word	0x080601c4

080a04dc <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a04dc:	b508      	push	{r3, lr}
 80a04de:	4b02      	ldr	r3, [pc, #8]	; (80a04e8 <HAL_USART_Peek_Data+0xc>)
 80a04e0:	681b      	ldr	r3, [r3, #0]
 80a04e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a04e4:	9301      	str	r3, [sp, #4]
 80a04e6:	bd08      	pop	{r3, pc}
 80a04e8:	080601c4 	.word	0x080601c4

080a04ec <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a04ec:	b508      	push	{r3, lr}
 80a04ee:	4b02      	ldr	r3, [pc, #8]	; (80a04f8 <HAL_USART_Flush_Data+0xc>)
 80a04f0:	681b      	ldr	r3, [r3, #0]
 80a04f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a04f4:	9301      	str	r3, [sp, #4]
 80a04f6:	bd08      	pop	{r3, pc}
 80a04f8:	080601c4 	.word	0x080601c4

080a04fc <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a04fc:	b508      	push	{r3, lr}
 80a04fe:	4b02      	ldr	r3, [pc, #8]	; (80a0508 <HAL_USART_Is_Enabled+0xc>)
 80a0500:	681b      	ldr	r3, [r3, #0]
 80a0502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a0504:	9301      	str	r3, [sp, #4]
 80a0506:	bd08      	pop	{r3, pc}
 80a0508:	080601c4 	.word	0x080601c4

080a050c <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a050c:	b508      	push	{r3, lr}
 80a050e:	4b02      	ldr	r3, [pc, #8]	; (80a0518 <HAL_USART_Available_Data_For_Write+0xc>)
 80a0510:	681b      	ldr	r3, [r3, #0]
 80a0512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0514:	9301      	str	r3, [sp, #4]
 80a0516:	bd08      	pop	{r3, pc}
 80a0518:	080601c4 	.word	0x080601c4

080a051c <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a051c:	b508      	push	{r3, lr}
 80a051e:	4b02      	ldr	r3, [pc, #8]	; (80a0528 <HAL_I2C_Write_Data+0xc>)
 80a0520:	681b      	ldr	r3, [r3, #0]
 80a0522:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a0524:	9301      	str	r3, [sp, #4]
 80a0526:	bd08      	pop	{r3, pc}
 80a0528:	080601ac 	.word	0x080601ac

080a052c <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a052c:	b508      	push	{r3, lr}
 80a052e:	4b02      	ldr	r3, [pc, #8]	; (80a0538 <HAL_I2C_Available_Data+0xc>)
 80a0530:	681b      	ldr	r3, [r3, #0]
 80a0532:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a0534:	9301      	str	r3, [sp, #4]
 80a0536:	bd08      	pop	{r3, pc}
 80a0538:	080601ac 	.word	0x080601ac

080a053c <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a053c:	b508      	push	{r3, lr}
 80a053e:	4b02      	ldr	r3, [pc, #8]	; (80a0548 <HAL_I2C_Read_Data+0xc>)
 80a0540:	681b      	ldr	r3, [r3, #0]
 80a0542:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a0544:	9301      	str	r3, [sp, #4]
 80a0546:	bd08      	pop	{r3, pc}
 80a0548:	080601ac 	.word	0x080601ac

080a054c <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a054c:	b508      	push	{r3, lr}
 80a054e:	4b02      	ldr	r3, [pc, #8]	; (80a0558 <HAL_I2C_Peek_Data+0xc>)
 80a0550:	681b      	ldr	r3, [r3, #0]
 80a0552:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a0554:	9301      	str	r3, [sp, #4]
 80a0556:	bd08      	pop	{r3, pc}
 80a0558:	080601ac 	.word	0x080601ac

080a055c <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a055c:	b508      	push	{r3, lr}
 80a055e:	4b02      	ldr	r3, [pc, #8]	; (80a0568 <HAL_I2C_Flush_Data+0xc>)
 80a0560:	681b      	ldr	r3, [r3, #0]
 80a0562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a0564:	9301      	str	r3, [sp, #4]
 80a0566:	bd08      	pop	{r3, pc}
 80a0568:	080601ac 	.word	0x080601ac

080a056c <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a056c:	b508      	push	{r3, lr}
 80a056e:	4b02      	ldr	r3, [pc, #8]	; (80a0578 <HAL_I2C_Is_Enabled+0xc>)
 80a0570:	681b      	ldr	r3, [r3, #0]
 80a0572:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a0574:	9301      	str	r3, [sp, #4]
 80a0576:	bd08      	pop	{r3, pc}
 80a0578:	080601ac 	.word	0x080601ac

080a057c <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a057c:	b508      	push	{r3, lr}
 80a057e:	4b03      	ldr	r3, [pc, #12]	; (80a058c <HAL_I2C_Init+0x10>)
 80a0580:	681b      	ldr	r3, [r3, #0]
 80a0582:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a0586:	9301      	str	r3, [sp, #4]
 80a0588:	bd08      	pop	{r3, pc}
 80a058a:	0000      	.short	0x0000
 80a058c:	080601ac 	.word	0x080601ac

080a0590 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a0590:	b508      	push	{r3, lr}
 80a0592:	4b02      	ldr	r3, [pc, #8]	; (80a059c <HAL_USB_USART_Init+0xc>)
 80a0594:	681b      	ldr	r3, [r3, #0]
 80a0596:	681b      	ldr	r3, [r3, #0]
 80a0598:	9301      	str	r3, [sp, #4]
 80a059a:	bd08      	pop	{r3, pc}
 80a059c:	080601d8 	.word	0x080601d8

080a05a0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a05a0:	b508      	push	{r3, lr}
 80a05a2:	4b02      	ldr	r3, [pc, #8]	; (80a05ac <HAL_USB_USART_Available_Data+0xc>)
 80a05a4:	681b      	ldr	r3, [r3, #0]
 80a05a6:	691b      	ldr	r3, [r3, #16]
 80a05a8:	9301      	str	r3, [sp, #4]
 80a05aa:	bd08      	pop	{r3, pc}
 80a05ac:	080601d8 	.word	0x080601d8

080a05b0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a05b0:	b508      	push	{r3, lr}
 80a05b2:	4b02      	ldr	r3, [pc, #8]	; (80a05bc <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a05b4:	681b      	ldr	r3, [r3, #0]
 80a05b6:	695b      	ldr	r3, [r3, #20]
 80a05b8:	9301      	str	r3, [sp, #4]
 80a05ba:	bd08      	pop	{r3, pc}
 80a05bc:	080601d8 	.word	0x080601d8

080a05c0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a05c0:	b508      	push	{r3, lr}
 80a05c2:	4b02      	ldr	r3, [pc, #8]	; (80a05cc <HAL_USB_USART_Receive_Data+0xc>)
 80a05c4:	681b      	ldr	r3, [r3, #0]
 80a05c6:	699b      	ldr	r3, [r3, #24]
 80a05c8:	9301      	str	r3, [sp, #4]
 80a05ca:	bd08      	pop	{r3, pc}
 80a05cc:	080601d8 	.word	0x080601d8

080a05d0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a05d0:	b508      	push	{r3, lr}
 80a05d2:	4b02      	ldr	r3, [pc, #8]	; (80a05dc <HAL_USB_USART_Send_Data+0xc>)
 80a05d4:	681b      	ldr	r3, [r3, #0]
 80a05d6:	69db      	ldr	r3, [r3, #28]
 80a05d8:	9301      	str	r3, [sp, #4]
 80a05da:	bd08      	pop	{r3, pc}
 80a05dc:	080601d8 	.word	0x080601d8

080a05e0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a05e0:	b508      	push	{r3, lr}
 80a05e2:	4b02      	ldr	r3, [pc, #8]	; (80a05ec <HAL_USB_USART_Flush_Data+0xc>)
 80a05e4:	681b      	ldr	r3, [r3, #0]
 80a05e6:	6a1b      	ldr	r3, [r3, #32]
 80a05e8:	9301      	str	r3, [sp, #4]
 80a05ea:	bd08      	pop	{r3, pc}
 80a05ec:	080601d8 	.word	0x080601d8

080a05f0 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a05f0:	b508      	push	{r3, lr}
 80a05f2:	4b02      	ldr	r3, [pc, #8]	; (80a05fc <set_system_mode+0xc>)
 80a05f4:	681b      	ldr	r3, [r3, #0]
 80a05f6:	685b      	ldr	r3, [r3, #4]
 80a05f8:	9301      	str	r3, [sp, #4]
 80a05fa:	bd08      	pop	{r3, pc}
 80a05fc:	080601a4 	.word	0x080601a4

080a0600 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a0600:	b508      	push	{r3, lr}
 80a0602:	4b02      	ldr	r3, [pc, #8]	; (80a060c <system_delay_ms+0xc>)
 80a0604:	681b      	ldr	r3, [r3, #0]
 80a0606:	695b      	ldr	r3, [r3, #20]
 80a0608:	9301      	str	r3, [sp, #4]
 80a060a:	bd08      	pop	{r3, pc}
 80a060c:	080601a4 	.word	0x080601a4

080a0610 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a0610:	b508      	push	{r3, lr}
 80a0612:	4b02      	ldr	r3, [pc, #8]	; (80a061c <application_thread_current+0xc>)
 80a0614:	681b      	ldr	r3, [r3, #0]
 80a0616:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a0618:	9301      	str	r3, [sp, #4]
 80a061a:	bd08      	pop	{r3, pc}
 80a061c:	080601a4 	.word	0x080601a4

080a0620 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a0620:	b508      	push	{r3, lr}
 80a0622:	4b02      	ldr	r3, [pc, #8]	; (80a062c <application_thread_invoke+0xc>)
 80a0624:	681b      	ldr	r3, [r3, #0]
 80a0626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a0628:	9301      	str	r3, [sp, #4]
 80a062a:	bd08      	pop	{r3, pc}
 80a062c:	080601a4 	.word	0x080601a4

080a0630 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a0630:	b508      	push	{r3, lr}
 80a0632:	4b03      	ldr	r3, [pc, #12]	; (80a0640 <system_ctrl_set_app_request_handler+0x10>)
 80a0634:	681b      	ldr	r3, [r3, #0]
 80a0636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a063a:	9301      	str	r3, [sp, #4]
 80a063c:	bd08      	pop	{r3, pc}
 80a063e:	0000      	.short	0x0000
 80a0640:	080601a4 	.word	0x080601a4

080a0644 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a0644:	b508      	push	{r3, lr}
 80a0646:	4b03      	ldr	r3, [pc, #12]	; (80a0654 <system_ctrl_set_result+0x10>)
 80a0648:	681b      	ldr	r3, [r3, #0]
 80a064a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a064e:	9301      	str	r3, [sp, #4]
 80a0650:	bd08      	pop	{r3, pc}
 80a0652:	0000      	.short	0x0000
 80a0654:	080601a4 	.word	0x080601a4

080a0658 <network_ready>:

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a0658:	b508      	push	{r3, lr}
 80a065a:	4b02      	ldr	r3, [pc, #8]	; (80a0664 <network_ready+0xc>)
 80a065c:	681b      	ldr	r3, [r3, #0]
 80a065e:	691b      	ldr	r3, [r3, #16]
 80a0660:	9301      	str	r3, [sp, #4]
 80a0662:	bd08      	pop	{r3, pc}
 80a0664:	080601c8 	.word	0x080601c8

080a0668 <spark_send_event>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a0668:	b508      	push	{r3, lr}
 80a066a:	4b02      	ldr	r3, [pc, #8]	; (80a0674 <spark_send_event+0xc>)
 80a066c:	681b      	ldr	r3, [r3, #0]
 80a066e:	6a1b      	ldr	r3, [r3, #32]
 80a0670:	9301      	str	r3, [sp, #4]
 80a0672:	bd08      	pop	{r3, pc}
 80a0674:	080601cc 	.word	0x080601cc

080a0678 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a0678:	b508      	push	{r3, lr}
 80a067a:	4b02      	ldr	r3, [pc, #8]	; (80a0684 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a067c:	681b      	ldr	r3, [r3, #0]
 80a067e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0680:	9301      	str	r3, [sp, #4]
 80a0682:	bd08      	pop	{r3, pc}
 80a0684:	080601cc 	.word	0x080601cc

080a0688 <malloc>:

#include "dynalib.h"

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a0688:	b508      	push	{r3, lr}
 80a068a:	4b02      	ldr	r3, [pc, #8]	; (80a0694 <malloc+0xc>)
 80a068c:	681b      	ldr	r3, [r3, #0]
 80a068e:	681b      	ldr	r3, [r3, #0]
 80a0690:	9301      	str	r3, [sp, #4]
 80a0692:	bd08      	pop	{r3, pc}
 80a0694:	080601a0 	.word	0x080601a0

080a0698 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a0698:	b508      	push	{r3, lr}
 80a069a:	4b02      	ldr	r3, [pc, #8]	; (80a06a4 <free+0xc>)
 80a069c:	681b      	ldr	r3, [r3, #0]
 80a069e:	685b      	ldr	r3, [r3, #4]
 80a06a0:	9301      	str	r3, [sp, #4]
 80a06a2:	bd08      	pop	{r3, pc}
 80a06a4:	080601a0 	.word	0x080601a0

080a06a8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a06a8:	b508      	push	{r3, lr}
 80a06aa:	4b02      	ldr	r3, [pc, #8]	; (80a06b4 <realloc+0xc>)
 80a06ac:	681b      	ldr	r3, [r3, #0]
 80a06ae:	689b      	ldr	r3, [r3, #8]
 80a06b0:	9301      	str	r3, [sp, #4]
 80a06b2:	bd08      	pop	{r3, pc}
 80a06b4:	080601a0 	.word	0x080601a0

080a06b8 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a06b8:	b508      	push	{r3, lr}
 80a06ba:	4b02      	ldr	r3, [pc, #8]	; (80a06c4 <abort+0xc>)
 80a06bc:	681b      	ldr	r3, [r3, #0]
 80a06be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a06c0:	9301      	str	r3, [sp, #4]
 80a06c2:	bd08      	pop	{r3, pc}
 80a06c4:	080601a0 	.word	0x080601a0

080a06c8 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a06c8:	b508      	push	{r3, lr}
 80a06ca:	4b02      	ldr	r3, [pc, #8]	; (80a06d4 <_malloc_r+0xc>)
 80a06cc:	681b      	ldr	r3, [r3, #0]
 80a06ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a06d0:	9301      	str	r3, [sp, #4]
 80a06d2:	bd08      	pop	{r3, pc}
 80a06d4:	080601a0 	.word	0x080601a0

080a06d8 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a06d8:	4770      	bx	lr

080a06da <_ZN8SPIClassD0Ev>:
 80a06da:	b510      	push	{r4, lr}
 80a06dc:	4604      	mov	r4, r0
 80a06de:	f7ff fcde 	bl	80a009e <_ZdlPv>
 80a06e2:	4620      	mov	r0, r4
 80a06e4:	bd10      	pop	{r4, pc}
	...

080a06e8 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a06e8:	b570      	push	{r4, r5, r6, lr}
 80a06ea:	4604      	mov	r4, r0
 80a06ec:	460e      	mov	r6, r1
 80a06ee:	4b07      	ldr	r3, [pc, #28]	; (80a070c <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a06f0:	2500      	movs	r5, #0
 80a06f2:	6003      	str	r3, [r0, #0]
 80a06f4:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a06f8:	f7ff fec8 	bl	80a048c <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a06fc:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a06fe:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a0700:	f7ff fe9c 	bl	80a043c <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a0704:	60a5      	str	r5, [r4, #8]
}
 80a0706:	4620      	mov	r0, r4
 80a0708:	bd70      	pop	{r4, r5, r6, pc}
 80a070a:	bf00      	nop
 80a070c:	080a193c 	.word	0x080a193c

080a0710 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a0710:	7900      	ldrb	r0, [r0, #4]
 80a0712:	f7ff be9b 	b.w	80a044c <HAL_SPI_Is_Enabled>
	...

080a0718 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a0718:	f64f 739c 	movw	r3, #65436	; 0xff9c
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
}
 80a071c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a071e:	4c0d      	ldr	r4, [pc, #52]	; (80a0754 <_GLOBAL__sub_I_System+0x3c>)
 80a0720:	2500      	movs	r5, #0
 80a0722:	8063      	strh	r3, [r4, #2]
 80a0724:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0728:	4628      	mov	r0, r5
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a072a:	80a3      	strh	r3, [r4, #4]
 80a072c:	7025      	strb	r5, [r4, #0]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a072e:	f7ff ff5f 	bl	80a05f0 <set_system_mode>
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
 80a0732:	a802      	add	r0, sp, #8
 80a0734:	f840 5d04 	str.w	r5, [r0, #-4]!
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 80a0738:	462a      	mov	r2, r5
 80a073a:	4629      	mov	r1, r5
 80a073c:	f7ff fe9e 	bl	80a047c <HAL_Core_Get_Last_Reset_Info>
        return reason;
 80a0740:	9b01      	ldr	r3, [sp, #4]
class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
        if (resetReason() == RESET_REASON_POWER_MANAGEMENT) {
 80a0742:	2b1e      	cmp	r3, #30
 80a0744:	d104      	bne.n	80a0750 <_GLOBAL__sub_I_System+0x38>
            // Woken up from standby mode
            sleepResult_ = SleepResult(WAKEUP_REASON_PIN_OR_RTC, SYSTEM_ERROR_NONE, WKP);
 80a0746:	2303      	movs	r3, #3
 80a0748:	7023      	strb	r3, [r4, #0]
 80a074a:	2311      	movs	r3, #17
 80a074c:	8065      	strh	r5, [r4, #2]
 80a074e:	80a3      	strh	r3, [r4, #4]
 80a0750:	b003      	add	sp, #12
 80a0752:	bd30      	pop	{r4, r5, pc}
 80a0754:	20000392 	.word	0x20000392

080a0758 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 80a0758:	b510      	push	{r4, lr}
 80a075a:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 80a075c:	f001 f8ab 	bl	80a18b6 <strlen>
 80a0760:	3801      	subs	r0, #1
 80a0762:	1823      	adds	r3, r4, r0
 80a0764:	4620      	mov	r0, r4
	while(i<j){
 80a0766:	4298      	cmp	r0, r3
 80a0768:	d206      	bcs.n	80a0778 <_Z11str_reversePc+0x20>
		c = *i;
 80a076a:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 80a076c:	7819      	ldrb	r1, [r3, #0]
 80a076e:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 80a0772:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
 80a0776:	e7f6      	b.n	80a0766 <_Z11str_reversePc+0xe>
 80a0778:	bd10      	pop	{r4, pc}

080a077a <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 80a077a:	b570      	push	{r4, r5, r6, lr}
 80a077c:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 80a077e:	1e91      	subs	r1, r2, #2
 80a0780:	2922      	cmp	r1, #34	; 0x22
 80a0782:	d820      	bhi.n	80a07c6 <ultoa+0x4c>
 80a0784:	4625      	mov	r5, r4
 80a0786:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 80a0788:	b910      	cbnz	r0, 80a0790 <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 80a078a:	4423      	add	r3, r4
            *ptr++ = '0';
 80a078c:	2230      	movs	r2, #48	; 0x30
 80a078e:	e00e      	b.n	80a07ae <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
 80a0790:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 80a0794:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 80a0798:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 80a079a:	2809      	cmp	r0, #9
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
            result.rem = a%radix;
            *ptr = result.rem;
 80a079c:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
                *ptr += '0';
 80a07a0:	bf94      	ite	ls
 80a07a2:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
 80a07a4:	3157      	addhi	r1, #87	; 0x57
 80a07a6:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
 80a07aa:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 80a07ac:	e7eb      	b.n	80a0786 <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 80a07ae:	4299      	cmp	r1, r3
 80a07b0:	d202      	bcs.n	80a07b8 <ultoa+0x3e>
            *ptr++ = '0';
 80a07b2:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 80a07b6:	e7fa      	b.n	80a07ae <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
 80a07b8:	2300      	movs	r3, #0
	str_reverse(buffer);
 80a07ba:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
 80a07bc:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
 80a07be:	f7ff ffcb 	bl	80a0758 <_Z11str_reversePc>
	return buffer;
 80a07c2:	4620      	mov	r0, r4
 80a07c4:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
 80a07c6:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
 80a07c8:	bd70      	pop	{r4, r5, r6, pc}

080a07ca <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 80a07ca:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
 80a07cc:	1e03      	subs	r3, r0, #0
	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 80a07ce:	460c      	mov	r4, r1
 80a07d0:	4615      	mov	r5, r2
	if(a<0){
 80a07d2:	da0b      	bge.n	80a07ec <itoa+0x22>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 80a07d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
 80a07d8:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 80a07dc:	bf14      	ite	ne
 80a07de:	4258      	negne	r0, r3
 80a07e0:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
 80a07e2:	2301      	movs	r3, #1
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
 80a07e4:	700a      	strb	r2, [r1, #0]
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
		ultoa((unsigned)v, buffer + 1, radix);
 80a07e6:	462a      	mov	r2, r5
 80a07e8:	4419      	add	r1, r3
 80a07ea:	e000      	b.n	80a07ee <itoa+0x24>
	}else{
		ultoa(a, buffer, radix);
 80a07ec:	2301      	movs	r3, #1
 80a07ee:	f7ff ffc4 	bl	80a077a <ultoa>
	}
	return buffer;
}
 80a07f2:	4620      	mov	r0, r4
 80a07f4:	bd38      	pop	{r3, r4, r5, pc}

080a07f6 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a07f6:	b510      	push	{r4, lr}
 80a07f8:	4604      	mov	r4, r0
{
	free(buffer);
 80a07fa:	6800      	ldr	r0, [r0, #0]
 80a07fc:	f7ff ff4c 	bl	80a0698 <free>
}
 80a0800:	4620      	mov	r0, r4
 80a0802:	bd10      	pop	{r4, pc}

080a0804 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a0804:	b510      	push	{r4, lr}
 80a0806:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a0808:	6800      	ldr	r0, [r0, #0]
 80a080a:	b108      	cbz	r0, 80a0810 <_ZN6String10invalidateEv+0xc>
 80a080c:	f7ff ff44 	bl	80a0698 <free>
	buffer = NULL;
 80a0810:	2300      	movs	r3, #0
 80a0812:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a0814:	60a3      	str	r3, [r4, #8]
 80a0816:	6063      	str	r3, [r4, #4]
 80a0818:	bd10      	pop	{r4, pc}

080a081a <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a081a:	b538      	push	{r3, r4, r5, lr}
 80a081c:	4604      	mov	r4, r0
 80a081e:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a0820:	6800      	ldr	r0, [r0, #0]
 80a0822:	3101      	adds	r1, #1
 80a0824:	f7ff ff40 	bl	80a06a8 <realloc>
	if (newbuffer) {
 80a0828:	b110      	cbz	r0, 80a0830 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a082a:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a082e:	2001      	movs	r0, #1
	}
	return 0;
}
 80a0830:	bd38      	pop	{r3, r4, r5, pc}

080a0832 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a0832:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a0834:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a0836:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a0838:	b113      	cbz	r3, 80a0840 <_ZN6String7reserveEj+0xe>
 80a083a:	6843      	ldr	r3, [r0, #4]
 80a083c:	428b      	cmp	r3, r1
 80a083e:	d207      	bcs.n	80a0850 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a0840:	4620      	mov	r0, r4
 80a0842:	f7ff ffea 	bl	80a081a <_ZN6String12changeBufferEj>
 80a0846:	b120      	cbz	r0, 80a0852 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a0848:	68a3      	ldr	r3, [r4, #8]
 80a084a:	b90b      	cbnz	r3, 80a0850 <_ZN6String7reserveEj+0x1e>
 80a084c:	6822      	ldr	r2, [r4, #0]
 80a084e:	7013      	strb	r3, [r2, #0]
 80a0850:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a0852:	bd10      	pop	{r4, pc}

080a0854 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a0854:	b570      	push	{r4, r5, r6, lr}
 80a0856:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a0858:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a085a:	4604      	mov	r4, r0
 80a085c:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a085e:	f7ff ffe8 	bl	80a0832 <_ZN6String7reserveEj>
 80a0862:	b918      	cbnz	r0, 80a086c <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a0864:	4620      	mov	r0, r4
 80a0866:	f7ff ffcd 	bl	80a0804 <_ZN6String10invalidateEv>
		return *this;
 80a086a:	e009      	b.n	80a0880 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a086c:	462a      	mov	r2, r5
 80a086e:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a0870:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a0872:	6820      	ldr	r0, [r4, #0]
 80a0874:	f000 ffc8 	bl	80a1808 <memcpy>
	buffer[len] = 0;
 80a0878:	6822      	ldr	r2, [r4, #0]
 80a087a:	68a3      	ldr	r3, [r4, #8]
 80a087c:	2100      	movs	r1, #0
 80a087e:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a0880:	4620      	mov	r0, r4
 80a0882:	bd70      	pop	{r4, r5, r6, pc}

080a0884 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a0884:	b538      	push	{r3, r4, r5, lr}
 80a0886:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a0888:	460c      	mov	r4, r1
 80a088a:	b141      	cbz	r1, 80a089e <_ZN6StringaSEPKc+0x1a>
 80a088c:	4608      	mov	r0, r1
 80a088e:	f001 f812 	bl	80a18b6 <strlen>
 80a0892:	4621      	mov	r1, r4
 80a0894:	4602      	mov	r2, r0
 80a0896:	4628      	mov	r0, r5
 80a0898:	f7ff ffdc 	bl	80a0854 <_ZN6String4copyEPKcj>
 80a089c:	e001      	b.n	80a08a2 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 80a089e:	f7ff ffb1 	bl	80a0804 <_ZN6String10invalidateEv>

	return *this;
}
 80a08a2:	4628      	mov	r0, r5
 80a08a4:	bd38      	pop	{r3, r4, r5, pc}

080a08a6 <_ZN6StringC1Eih>:
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 80a08a6:	b510      	push	{r4, lr}
 80a08a8:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a08aa:	2300      	movs	r3, #0
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 80a08ac:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a08ae:	6023      	str	r3, [r4, #0]
	capacity = 0;
 80a08b0:	6063      	str	r3, [r4, #4]
	len = 0;
 80a08b2:	60a3      	str	r3, [r4, #8]
	flags = 0;
 80a08b4:	7323      	strb	r3, [r4, #12]
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 80a08b6:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	itoa(value, buf, base);
 80a08b8:	a901      	add	r1, sp, #4
 80a08ba:	f7ff ff86 	bl	80a07ca <itoa>
	*this = buf;
 80a08be:	a901      	add	r1, sp, #4
 80a08c0:	4620      	mov	r0, r4
 80a08c2:	f7ff ffdf 	bl	80a0884 <_ZN6StringaSEPKc>
}
 80a08c6:	4620      	mov	r0, r4
 80a08c8:	b00a      	add	sp, #40	; 0x28
 80a08ca:	bd10      	pop	{r4, pc}

080a08cc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a08cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a08ce:	4606      	mov	r6, r0
 80a08d0:	460d      	mov	r5, r1
 80a08d2:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a08d4:	2400      	movs	r4, #0
  while (size--) {
 80a08d6:	42bd      	cmp	r5, r7
 80a08d8:	d00c      	beq.n	80a08f4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a08da:	6833      	ldr	r3, [r6, #0]
 80a08dc:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a08e0:	689b      	ldr	r3, [r3, #8]
 80a08e2:	4630      	mov	r0, r6
 80a08e4:	4798      	blx	r3
     if (chunk>=0)
 80a08e6:	2800      	cmp	r0, #0
 80a08e8:	db01      	blt.n	80a08ee <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a08ea:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a08ec:	e7f3      	b.n	80a08d6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a08ee:	2c00      	cmp	r4, #0
 80a08f0:	bf08      	it	eq
 80a08f2:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a08f4:	4620      	mov	r0, r4
 80a08f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a08f8 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a08f8:	b570      	push	{r4, r5, r6, lr}
 80a08fa:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a08fc:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a08fe:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a0900:	b149      	cbz	r1, 80a0916 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a0902:	f000 ffd8 	bl	80a18b6 <strlen>
 80a0906:	682b      	ldr	r3, [r5, #0]
 80a0908:	4602      	mov	r2, r0
 80a090a:	4621      	mov	r1, r4
 80a090c:	4628      	mov	r0, r5
    }
 80a090e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a0912:	68db      	ldr	r3, [r3, #12]
 80a0914:	4718      	bx	r3
    }
 80a0916:	bd70      	pop	{r4, r5, r6, pc}

080a0918 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a0918:	6803      	ldr	r3, [r0, #0]
 80a091a:	689b      	ldr	r3, [r3, #8]
 80a091c:	4718      	bx	r3

080a091e <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a091e:	2a01      	cmp	r2, #1
 80a0920:	bf98      	it	ls
 80a0922:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a0924:	b530      	push	{r4, r5, lr}
 80a0926:	460b      	mov	r3, r1
 80a0928:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a092a:	2100      	movs	r1, #0
 80a092c:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a0930:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a0934:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a0938:	fb05 3312 	mls	r3, r5, r2, r3
 80a093c:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a093e:	2b09      	cmp	r3, #9
 80a0940:	bf94      	ite	ls
 80a0942:	3330      	addls	r3, #48	; 0x30
 80a0944:	3337      	addhi	r3, #55	; 0x37
 80a0946:	b2db      	uxtb	r3, r3
 80a0948:	4621      	mov	r1, r4
 80a094a:	f804 3901 	strb.w	r3, [r4], #-1
 80a094e:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a0950:	2d00      	cmp	r5, #0
 80a0952:	d1ef      	bne.n	80a0934 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a0954:	f7ff ffd0 	bl	80a08f8 <_ZN5Print5writeEPKc>
}
 80a0958:	b00b      	add	sp, #44	; 0x2c
 80a095a:	bd30      	pop	{r4, r5, pc}

080a095c <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a095c:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a095e:	b922      	cbnz	r2, 80a096a <_ZN5Print5printEmi+0xe>
 80a0960:	6803      	ldr	r3, [r0, #0]
 80a0962:	b2c9      	uxtb	r1, r1
 80a0964:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a0966:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a0968:	4718      	bx	r3
  else return printNumber(n, base);
 80a096a:	b2d2      	uxtb	r2, r2
}
 80a096c:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a096e:	f7ff bfd6 	b.w	80a091e <_ZN5Print11printNumberEmh>

080a0972 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a0972:	f7ff bff3 	b.w	80a095c <_ZN5Print5printEmi>

080a0976 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 80a0976:	680b      	ldr	r3, [r1, #0]
 80a0978:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 80a097a:	b113      	cbz	r3, 80a0982 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 80a097c:	685a      	ldr	r2, [r3, #4]
 80a097e:	3201      	adds	r2, #1
 80a0980:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 80a0982:	4770      	bx	lr

080a0984 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a0984:	4a01      	ldr	r2, [pc, #4]	; (80a098c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a0986:	4b02      	ldr	r3, [pc, #8]	; (80a0990 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a0988:	601a      	str	r2, [r3, #0]
 80a098a:	4770      	bx	lr
 80a098c:	080a19ff 	.word	0x080a19ff
 80a0990:	20000398 	.word	0x20000398

080a0994 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a0994:	4b02      	ldr	r3, [pc, #8]	; (80a09a0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a0996:	681a      	ldr	r2, [r3, #0]
 80a0998:	4b02      	ldr	r3, [pc, #8]	; (80a09a4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a099a:	601a      	str	r2, [r3, #0]
 80a099c:	4770      	bx	lr
 80a099e:	bf00      	nop
 80a09a0:	20000310 	.word	0x20000310
 80a09a4:	2000039c 	.word	0x2000039c

080a09a8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a09a8:	2100      	movs	r1, #0
 80a09aa:	f7ff be29 	b.w	80a0600 <system_delay_ms>

080a09ae <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a09ae:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a09b0:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a09b2:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a09b4:	b113      	cbz	r3, 80a09bc <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a09b6:	2203      	movs	r2, #3
 80a09b8:	4601      	mov	r1, r0
 80a09ba:	4798      	blx	r3
    }
 80a09bc:	4620      	mov	r0, r4
 80a09be:	bd10      	pop	{r4, pc}

080a09c0 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a09c0:	b510      	push	{r4, lr}
 80a09c2:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a09c4:	f7ff fff3 	bl	80a09ae <_ZNSt14_Function_baseD1Ev>
 80a09c8:	4620      	mov	r0, r4
 80a09ca:	bd10      	pop	{r4, pc}

080a09cc <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 80a09cc:	b513      	push	{r0, r1, r4, lr}
 80a09ce:	460b      	mov	r3, r1
 80a09d0:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a09d2:	c803      	ldmia	r0, {r0, r1}
 80a09d4:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a09d8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a09dc:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a09e0:	e89d 0003 	ldmia.w	sp, {r0, r1}
 80a09e4:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a09e8:	b002      	add	sp, #8
 80a09ea:	bd10      	pop	{r4, pc}

080a09ec <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a09ec:	4803      	ldr	r0, [pc, #12]	; (80a09fc <_GLOBAL__sub_I_RGB+0x10>)
 80a09ee:	2300      	movs	r3, #0
 80a09f0:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a09f2:	4a03      	ldr	r2, [pc, #12]	; (80a0a00 <_GLOBAL__sub_I_RGB+0x14>)
 80a09f4:	4903      	ldr	r1, [pc, #12]	; (80a0a04 <_GLOBAL__sub_I_RGB+0x18>)
 80a09f6:	f000 bda9 	b.w	80a154c <__aeabi_atexit>
 80a09fa:	bf00      	nop
 80a09fc:	200003a0 	.word	0x200003a0
 80a0a00:	20000378 	.word	0x20000378
 80a0a04:	080a09c1 	.word	0x080a09c1

080a0a08 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a0a08:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a0a0a:	4b14      	ldr	r3, [pc, #80]	; (80a0a5c <serialEventRun+0x54>)
 80a0a0c:	b133      	cbz	r3, 80a0a1c <serialEventRun+0x14>
 80a0a0e:	f000 fba7 	bl	80a1160 <_Z16_fetch_usbserialv>
 80a0a12:	6803      	ldr	r3, [r0, #0]
 80a0a14:	691b      	ldr	r3, [r3, #16]
 80a0a16:	4798      	blx	r3
 80a0a18:	2800      	cmp	r0, #0
 80a0a1a:	dc16      	bgt.n	80a0a4a <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a0a1c:	4b10      	ldr	r3, [pc, #64]	; (80a0a60 <serialEventRun+0x58>)
 80a0a1e:	b133      	cbz	r3, 80a0a2e <serialEventRun+0x26>
 80a0a20:	f000 fc44 	bl	80a12ac <_Z22__fetch_global_Serial1v>
 80a0a24:	6803      	ldr	r3, [r0, #0]
 80a0a26:	691b      	ldr	r3, [r3, #16]
 80a0a28:	4798      	blx	r3
 80a0a2a:	2800      	cmp	r0, #0
 80a0a2c:	dc10      	bgt.n	80a0a50 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a0a2e:	4b0d      	ldr	r3, [pc, #52]	; (80a0a64 <serialEventRun+0x5c>)
 80a0a30:	b10b      	cbz	r3, 80a0a36 <serialEventRun+0x2e>
 80a0a32:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a0a36:	4b0c      	ldr	r3, [pc, #48]	; (80a0a68 <serialEventRun+0x60>)
 80a0a38:	b17b      	cbz	r3, 80a0a5a <serialEventRun+0x52>
 80a0a3a:	f000 fbcd 	bl	80a11d8 <_Z17_fetch_usbserial1v>
 80a0a3e:	6803      	ldr	r3, [r0, #0]
 80a0a40:	691b      	ldr	r3, [r3, #16]
 80a0a42:	4798      	blx	r3
 80a0a44:	2800      	cmp	r0, #0
 80a0a46:	dc06      	bgt.n	80a0a56 <serialEventRun+0x4e>
 80a0a48:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a0a4a:	f3af 8000 	nop.w
 80a0a4e:	e7e5      	b.n	80a0a1c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a0a50:	f3af 8000 	nop.w
 80a0a54:	e7eb      	b.n	80a0a2e <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a0a56:	f3af 8000 	nop.w
 80a0a5a:	bd08      	pop	{r3, pc}
	...

080a0a6c <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a0a6c:	b508      	push	{r3, lr}
	serialEventRun();
 80a0a6e:	f7ff ffcb 	bl	80a0a08 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a0a72:	f7ff fcfb 	bl	80a046c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a0a76:	4b01      	ldr	r3, [pc, #4]	; (80a0a7c <_post_loop+0x10>)
 80a0a78:	6018      	str	r0, [r3, #0]
 80a0a7a:	bd08      	pop	{r3, pc}
 80a0a7c:	20000838 	.word	0x20000838

080a0a80 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a0a80:	4802      	ldr	r0, [pc, #8]	; (80a0a8c <_Z33system_initialize_user_backup_ramv+0xc>)
 80a0a82:	4a03      	ldr	r2, [pc, #12]	; (80a0a90 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a0a84:	4903      	ldr	r1, [pc, #12]	; (80a0a94 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a0a86:	1a12      	subs	r2, r2, r0
 80a0a88:	f000 bebe 	b.w	80a1808 <memcpy>
 80a0a8c:	40024000 	.word	0x40024000
 80a0a90:	40024004 	.word	0x40024004
 80a0a94:	080a1bb0 	.word	0x080a1bb0

080a0a98 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a0a98:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0a9a:	2300      	movs	r3, #0
 80a0a9c:	9300      	str	r3, [sp, #0]
 80a0a9e:	461a      	mov	r2, r3
 80a0aa0:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a0aa4:	f7ff fdce 	bl	80a0644 <system_ctrl_set_result>
}
 80a0aa8:	b003      	add	sp, #12
 80a0aaa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a0ab0 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a0ab0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a0ab2:	8843      	ldrh	r3, [r0, #2]
 80a0ab4:	2b0a      	cmp	r3, #10
 80a0ab6:	d008      	beq.n	80a0aca <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a0ab8:	2b50      	cmp	r3, #80	; 0x50
 80a0aba:	d109      	bne.n	80a0ad0 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a0abc:	4b09      	ldr	r3, [pc, #36]	; (80a0ae4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a0abe:	681b      	ldr	r3, [r3, #0]
 80a0ac0:	b13b      	cbz	r3, 80a0ad2 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a0ac2:	b003      	add	sp, #12
 80a0ac4:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a0ac8:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a0aca:	f7ff ffe5 	bl	80a0a98 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a0ace:	e006      	b.n	80a0ade <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0ad0:	2300      	movs	r3, #0
 80a0ad2:	9300      	str	r3, [sp, #0]
 80a0ad4:	461a      	mov	r2, r3
 80a0ad6:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a0ada:	f7ff fdb3 	bl	80a0644 <system_ctrl_set_result>
        break;
    }
}
 80a0ade:	b003      	add	sp, #12
 80a0ae0:	f85d fb04 	ldr.w	pc, [sp], #4
 80a0ae4:	200003b0 	.word	0x200003b0

080a0ae8 <module_user_init_hook>:

void module_user_init_hook()
{
 80a0ae8:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a0aea:	4c10      	ldr	r4, [pc, #64]	; (80a0b2c <module_user_init_hook+0x44>)
 80a0aec:	4d10      	ldr	r5, [pc, #64]	; (80a0b30 <module_user_init_hook+0x48>)
 80a0aee:	6823      	ldr	r3, [r4, #0]
 80a0af0:	42ab      	cmp	r3, r5
 80a0af2:	4b10      	ldr	r3, [pc, #64]	; (80a0b34 <module_user_init_hook+0x4c>)
 80a0af4:	bf0c      	ite	eq
 80a0af6:	2201      	moveq	r2, #1
 80a0af8:	2200      	movne	r2, #0
 80a0afa:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a0afc:	d002      	beq.n	80a0b04 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a0afe:	f7ff ffbf 	bl	80a0a80 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a0b02:	6025      	str	r5, [r4, #0]
#endif

    // todo - add a RNG define for that capability
#if defined(STM32F2XX)
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    srand(HAL_RNG_GetRandomNumber());
 80a0b04:	f7ff fcaa 	bl	80a045c <HAL_RNG_GetRandomNumber>
 80a0b08:	f000 fe92 	bl	80a1830 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a0b0c:	4b0a      	ldr	r3, [pc, #40]	; (80a0b38 <module_user_init_hook+0x50>)
 80a0b0e:	b11b      	cbz	r3, 80a0b18 <module_user_init_hook+0x30>
        uint32_t seed = HAL_RNG_GetRandomNumber();
 80a0b10:	f7ff fca4 	bl	80a045c <HAL_RNG_GetRandomNumber>
        random_seed_from_cloud(seed);
 80a0b14:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a0b18:	2100      	movs	r1, #0
 80a0b1a:	4807      	ldr	r0, [pc, #28]	; (80a0b38 <module_user_init_hook+0x50>)
 80a0b1c:	f7ff fdac 	bl	80a0678 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a0b20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a0b24:	2100      	movs	r1, #0
 80a0b26:	4805      	ldr	r0, [pc, #20]	; (80a0b3c <module_user_init_hook+0x54>)
 80a0b28:	f7ff bd82 	b.w	80a0630 <system_ctrl_set_app_request_handler>
 80a0b2c:	40024000 	.word	0x40024000
 80a0b30:	9a271c1e 	.word	0x9a271c1e
 80a0b34:	200003b4 	.word	0x200003b4
 80a0b38:	00000000 	.word	0x00000000
 80a0b3c:	080a0ab1 	.word	0x080a0ab1

080a0b40 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a0b40:	4770      	bx	lr

080a0b42 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 80a0b42:	2000      	movs	r0, #0
 80a0b44:	4770      	bx	lr

080a0b46 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a0b46:	b510      	push	{r4, lr}
 80a0b48:	4604      	mov	r4, r0
 80a0b4a:	f7ff faa8 	bl	80a009e <_ZdlPv>
 80a0b4e:	4620      	mov	r0, r4
 80a0b50:	bd10      	pop	{r4, pc}

080a0b52 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 80a0b52:	b508      	push	{r3, lr}
      { delete this; }
 80a0b54:	b108      	cbz	r0, 80a0b5a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 80a0b56:	f7ff fff6 	bl	80a0b46 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a0b5a:	bd08      	pop	{r3, pc}

080a0b5c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 80a0b5c:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a0b5e:	68c4      	ldr	r4, [r0, #12]
 80a0b60:	b1d4      	cbz	r4, 80a0b98 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x3c>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 80a0b62:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a0b64:	2b02      	cmp	r3, #2
 80a0b66:	d102      	bne.n	80a0b6e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x12>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80a0b68:	68e0      	ldr	r0, [r4, #12]
 80a0b6a:	f7ff fd95 	bl	80a0698 <free>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 80a0b6e:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 80a0b70:	b12d      	cbz	r5, 80a0b7e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x22>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0b72:	4628      	mov	r0, r5
 80a0b74:	f7ff ff1b 	bl	80a09ae <_ZNSt14_Function_baseD1Ev>
 80a0b78:	4628      	mov	r0, r5
 80a0b7a:	f7ff fa90 	bl	80a009e <_ZdlPv>
 80a0b7e:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a0b80:	b12d      	cbz	r5, 80a0b8e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x32>
 80a0b82:	4628      	mov	r0, r5
 80a0b84:	f7ff ff13 	bl	80a09ae <_ZNSt14_Function_baseD1Ev>
 80a0b88:	4628      	mov	r0, r5
 80a0b8a:	f7ff fa88 	bl	80a009e <_ZdlPv>
 80a0b8e:	4620      	mov	r0, r4
 80a0b90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a0b94:	f7ff ba83 	b.w	80a009e <_ZdlPv>
 80a0b98:	bd38      	pop	{r3, r4, r5, pc}

080a0b9a <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 80a0b9a:	b513      	push	{r0, r1, r4, lr}
 80a0b9c:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a0b9e:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 80a0ba2:	2300      	movs	r3, #0
 80a0ba4:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a0ba6:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a0ba8:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80a0baa:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a0bac:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80a0bae:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a0bb0:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a0bb2:	f7ff fa7e 	bl	80a00b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0bb6:	4620      	mov	r0, r4
 80a0bb8:	b002      	add	sp, #8
 80a0bba:	bd10      	pop	{r4, pc}

080a0bbc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a0bbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a0bbe:	460c      	mov	r4, r1
 80a0bc0:	4606      	mov	r6, r0
 80a0bc2:	460f      	mov	r7, r1
 80a0bc4:	f854 3b04 	ldr.w	r3, [r4], #4
 80a0bc8:	ad02      	add	r5, sp, #8
 80a0bca:	f845 3d08 	str.w	r3, [r5, #-8]!
 80a0bce:	4621      	mov	r1, r4
 80a0bd0:	a801      	add	r0, sp, #4
 80a0bd2:	f7ff fed0 	bl	80a0976 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 80a0bd6:	4629      	mov	r1, r5
 80a0bd8:	4630      	mov	r0, r6
 80a0bda:	f7ff ffde 	bl	80a0b9a <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a0bde:	a801      	add	r0, sp, #4
 80a0be0:	f7ff fa67 	bl	80a00b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0be4:	4620      	mov	r0, r4
 80a0be6:	f7ff fa64 	bl	80a00b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 80a0bea:	4638      	mov	r0, r7
 80a0bec:	f7ff fa57 	bl	80a009e <_ZdlPv>
        return p;
    }
 80a0bf0:	4630      	mov	r0, r6
 80a0bf2:	b003      	add	sp, #12
 80a0bf4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a0bf6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a0bf6:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a0bf8:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a0bfa:	b90a      	cbnz	r2, 80a0c00 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a0bfc:	f000 fcab 	bl	80a1556 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0c00:	68c3      	ldr	r3, [r0, #12]
    }
 80a0c02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0c06:	4718      	bx	r3

080a0c08 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a0c08:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a0c0a:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a0c0c:	f100 0110 	add.w	r1, r0, #16
 80a0c10:	f7ff fff1 	bl	80a0bf6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a0c14:	bd08      	pop	{r3, pc}

080a0c16 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a0c16:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a0c18:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a0c1a:	b90a      	cbnz	r2, 80a0c20 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a0c1c:	f000 fc9b 	bl	80a1556 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0c20:	68c3      	ldr	r3, [r0, #12]
    }
 80a0c22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0c26:	4718      	bx	r3

080a0c28 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a0c28:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a0c2a:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a0c2c:	f100 0110 	add.w	r1, r0, #16
 80a0c30:	f7ff fff1 	bl	80a0c16 <_ZNKSt8functionIFvRKbEEclES1_>
 80a0c34:	bd08      	pop	{r3, pc}

080a0c36 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a0c36:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0c38:	2300      	movs	r3, #0
 80a0c3a:	6083      	str	r3, [r0, #8]
 80a0c3c:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a0c3e:	4604      	mov	r4, r0
 80a0c40:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a0c42:	b12b      	cbz	r3, 80a0c50 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a0c44:	2202      	movs	r2, #2
 80a0c46:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a0c48:	68eb      	ldr	r3, [r5, #12]
 80a0c4a:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a0c4c:	68ab      	ldr	r3, [r5, #8]
 80a0c4e:	60a3      	str	r3, [r4, #8]
	}
    }
 80a0c50:	4620      	mov	r0, r4
 80a0c52:	bd38      	pop	{r3, r4, r5, pc}

080a0c54 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 80a0c54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
 80a0c58:	f64f 739c 	movw	r3, #65436	; 0xff9c
 80a0c5c:	6804      	ldr	r4, [r0, #0]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a0c5e:	f04f 0002 	mov.w	r0, #2
 80a0c62:	b086      	sub	sp, #24
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a0c64:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0c68:	808b      	strh	r3, [r1, #4]
 80a0c6a:	2300      	movs	r3, #0
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a0c6c:	680f      	ldr	r7, [r1, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a0c6e:	f88d 3000 	strb.w	r3, [sp]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0c72:	600b      	str	r3, [r1, #0]
 80a0c74:	e8d4 1f4f 	ldrexb	r1, [r4]
 80a0c78:	4299      	cmp	r1, r3
 80a0c7a:	d103      	bne.n	80a0c84 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x30>
 80a0c7c:	e8c4 0f45 	strexb	r5, r0, [r4]
 80a0c80:	2d00      	cmp	r5, #0
 80a0c82:	d1f7      	bne.n	80a0c74 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 80a0c84:	d002      	beq.n	80a0c8c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x38>
 80a0c86:	f88d 1000 	strb.w	r1, [sp]
 80a0c8a:	e06b      	b.n	80a0d64 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 80a0c8c:	f114 050c 	adds.w	r5, r4, #12
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a0c90:	bf1c      	itt	ne
 80a0c92:	60e7      	strne	r7, [r4, #12]
 80a0c94:	8222      	strhne	r2, [r4, #16]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a0c96:	f3bf 8f5f 	dmb	sy
      __b = _GLIBCXX_MOVE(__tmp);
 80a0c9a:	bf18      	it	ne
 80a0c9c:	461f      	movne	r7, r3
 80a0c9e:	2301      	movs	r3, #1
 80a0ca0:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a0ca2:	f3bf 8f5f 	dmb	sy
 80a0ca6:	f104 0308 	add.w	r3, r4, #8
 80a0caa:	2000      	movs	r0, #0
 80a0cac:	e853 6f00 	ldrex	r6, [r3]
 80a0cb0:	e843 0200 	strex	r2, r0, [r3]
 80a0cb4:	2a00      	cmp	r2, #0
 80a0cb6:	d1f9      	bne.n	80a0cac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x58>
 80a0cb8:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a0cbc:	2e00      	cmp	r6, #0
 80a0cbe:	d051      	beq.n	80a0d64 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a0cc0:	f7ff fca6 	bl	80a0610 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a0cc4:	b120      	cbz	r0, 80a0cd0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x7c>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a0cc6:	4629      	mov	r1, r5
 80a0cc8:	4630      	mov	r0, r6
 80a0cca:	f7ff ff94 	bl	80a0bf6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a0cce:	e043      	b.n	80a0d58 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a0cd0:	4631      	mov	r1, r6
 80a0cd2:	4668      	mov	r0, sp
 80a0cd4:	f7ff ffaf 	bl	80a0c36 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a0cd8:	68e0      	ldr	r0, [r4, #12]
 80a0cda:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a0cde:	b108      	cbz	r0, 80a0ce4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x90>
 80a0ce0:	f000 fdce 	bl	80a1880 <strdup>
 80a0ce4:	9004      	str	r0, [sp, #16]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a0ce6:	2010      	movs	r0, #16
 80a0ce8:	f8ad 5014 	strh.w	r5, [sp, #20]
 80a0cec:	f7ff f9d5 	bl	80a009a <_Znwj>
 80a0cf0:	4605      	mov	r5, r0
 80a0cf2:	b330      	cbz	r0, 80a0d42 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xee>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0cf4:	f04f 0800 	mov.w	r8, #0
 80a0cf8:	f8c0 8008 	str.w	r8, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0cfc:	2018      	movs	r0, #24
 80a0cfe:	f7ff f9cc 	bl	80a009a <_Znwj>
 80a0d02:	4604      	mov	r4, r0
 80a0d04:	b1c0      	cbz	r0, 80a0d38 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe4>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0d06:	f8c0 8008 	str.w	r8, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a0d0a:	4601      	mov	r1, r0
 80a0d0c:	4668      	mov	r0, sp
 80a0d0e:	f7ff fe5d 	bl	80a09cc <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0d12:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
 80a0d14:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0d16:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0d18:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a0d1a:	9202      	str	r2, [sp, #8]
 80a0d1c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0d1e:	60e3      	str	r3, [r4, #12]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a0d20:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80a0d24:	9203      	str	r2, [sp, #12]
 80a0d26:	82a3      	strh	r3, [r4, #20]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0d28:	f64f 739c 	movw	r3, #65436	; 0xff9c
 80a0d2c:	f8ad 3014 	strh.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a0d30:	9b04      	ldr	r3, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0d32:	f8cd 8010 	str.w	r8, [sp, #16]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a0d36:	6123      	str	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a0d38:	4b0d      	ldr	r3, [pc, #52]	; (80a0d70 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x11c>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0d3a:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a0d3c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a0d3e:	4b0d      	ldr	r3, [pc, #52]	; (80a0d74 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x120>)
 80a0d40:	60ab      	str	r3, [r5, #8]
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80a0d42:	9804      	ldr	r0, [sp, #16]
 80a0d44:	f7ff fca8 	bl	80a0698 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0d48:	4668      	mov	r0, sp
 80a0d4a:	f7ff fe30 	bl	80a09ae <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a0d4e:	2200      	movs	r2, #0
 80a0d50:	4629      	mov	r1, r5
 80a0d52:	4809      	ldr	r0, [pc, #36]	; (80a0d78 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x124>)
 80a0d54:	f7ff fc64 	bl	80a0620 <application_thread_invoke>
 80a0d58:	4630      	mov	r0, r6
 80a0d5a:	f7ff fe28 	bl	80a09ae <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a0d5e:	4630      	mov	r0, r6
 80a0d60:	f7ff f99d 	bl	80a009e <_ZdlPv>
 80a0d64:	4638      	mov	r0, r7
 80a0d66:	f7ff fc97 	bl	80a0698 <free>
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
    }
 80a0d6a:	b006      	add	sp, #24
 80a0d6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a0d70:	080a0c09 	.word	0x080a0c09
 80a0d74:	080a0e65 	.word	0x080a0e65
 80a0d78:	080a12f9 	.word	0x080a12f9

080a0d7c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a0d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0d80:	b08b      	sub	sp, #44	; 0x2c
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a0d82:	ad07      	add	r5, sp, #28
 80a0d84:	f04f 0b00 	mov.w	fp, #0
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a0d88:	4606      	mov	r6, r0
 80a0d8a:	4699      	mov	r9, r3
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a0d8c:	2014      	movs	r0, #20
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a0d8e:	230c      	movs	r3, #12
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a0d90:	460f      	mov	r7, r1
 80a0d92:	4690      	mov	r8, r2
 80a0d94:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a0d98:	f8c5 b004 	str.w	fp, [r5, #4]
 80a0d9c:	f8c5 b008 	str.w	fp, [r5, #8]
 80a0da0:	9307      	str	r3, [sp, #28]
 80a0da2:	f7ff f97a 	bl	80a009a <_Znwj>
 80a0da6:	4604      	mov	r4, r0
 80a0da8:	b138      	cbz	r0, 80a0dba <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x3e>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a0daa:	f880 b000 	strb.w	fp, [r0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a0dae:	f880 b001 	strb.w	fp, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a0db2:	f8c0 b004 	str.w	fp, [r0, #4]
 80a0db6:	f8c0 b008 	str.w	fp, [r0, #8]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a0dba:	2300      	movs	r3, #0
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a0dbc:	2010      	movs	r0, #16
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 80a0dbe:	9403      	str	r4, [sp, #12]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a0dc0:	9304      	str	r3, [sp, #16]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a0dc2:	f7ff f96a 	bl	80a009a <_Znwj>
 80a0dc6:	b128      	cbz	r0, 80a0dd4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x58>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80a0dc8:	2301      	movs	r3, #1
 80a0dca:	6043      	str	r3, [r0, #4]
 80a0dcc:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 80a0dce:	4b23      	ldr	r3, [pc, #140]	; (80a0e5c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe0>)
 80a0dd0:	60c4      	str	r4, [r0, #12]
 80a0dd2:	6003      	str	r3, [r0, #0]

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 80a0dd4:	4b22      	ldr	r3, [pc, #136]	; (80a0e60 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe4>)
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a0dd6:	9004      	str	r0, [sp, #16]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a0dd8:	2008      	movs	r0, #8
 80a0dda:	9308      	str	r3, [sp, #32]
 80a0ddc:	f7ff f95d 	bl	80a009a <_Znwj>
 80a0de0:	4604      	mov	r4, r0
 80a0de2:	b128      	cbz	r0, 80a0df0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x74>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a0de4:	9b03      	ldr	r3, [sp, #12]
 80a0de6:	a904      	add	r1, sp, #16
 80a0de8:	f840 3b04 	str.w	r3, [r0], #4
 80a0dec:	f7ff fdc3 	bl	80a0976 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a0df0:	9500      	str	r5, [sp, #0]
 80a0df2:	fa5f f38a 	uxtb.w	r3, sl
 80a0df6:	464a      	mov	r2, r9
 80a0df8:	4641      	mov	r1, r8
 80a0dfa:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 80a0dfc:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a0dfe:	f7ff fc33 	bl	80a0668 <spark_send_event>
 80a0e02:	b9b8      	cbnz	r0, 80a0e34 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 80a0e04:	9b03      	ldr	r3, [sp, #12]
 80a0e06:	785b      	ldrb	r3, [r3, #1]
 80a0e08:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a0e0c:	b993      	cbnz	r3, 80a0e34 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a0e0e:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 80a0e12:	a905      	add	r1, sp, #20
 80a0e14:	a803      	add	r0, sp, #12
 80a0e16:	9205      	str	r2, [sp, #20]
 80a0e18:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a0e1c:	f7ff ff1a 	bl	80a0c54 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80a0e20:	9805      	ldr	r0, [sp, #20]
 80a0e22:	f7ff fc39 	bl	80a0698 <free>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a0e26:	a805      	add	r0, sp, #20
 80a0e28:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a0e2a:	f7ff fec7 	bl	80a0bbc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a0e2e:	a806      	add	r0, sp, #24
 80a0e30:	f7ff f93f 	bl	80a00b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a0e34:	9b03      	ldr	r3, [sp, #12]
 80a0e36:	a904      	add	r1, sp, #16
 80a0e38:	a806      	add	r0, sp, #24
 80a0e3a:	9305      	str	r3, [sp, #20]
 80a0e3c:	f7ff fd9b 	bl	80a0976 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 80a0e40:	a905      	add	r1, sp, #20
 80a0e42:	4630      	mov	r0, r6
 80a0e44:	f7ff fea9 	bl	80a0b9a <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a0e48:	a806      	add	r0, sp, #24
 80a0e4a:	f7ff f932 	bl	80a00b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0e4e:	a804      	add	r0, sp, #16
 80a0e50:	f7ff f92f 	bl	80a00b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
 80a0e54:	4630      	mov	r0, r6
 80a0e56:	b00b      	add	sp, #44	; 0x2c
 80a0e58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0e5c:	080a1a5c 	.word	0x080a1a5c
 80a0e60:	080a0fcd 	.word	0x080a0fcd

080a0e64 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a0e64:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a0e66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0e68:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a0e6a:	d006      	beq.n	80a0e7a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 80a0e6c:	2a03      	cmp	r2, #3
 80a0e6e:	d017      	beq.n	80a0ea0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 80a0e70:	2a01      	cmp	r2, #1
 80a0e72:	d120      	bne.n	80a0eb6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a0e74:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a0e76:	6003      	str	r3, [r0, #0]
	      break;
 80a0e78:	e01d      	b.n	80a0eb6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a0e7a:	2018      	movs	r0, #24
 80a0e7c:	680e      	ldr	r6, [r1, #0]
 80a0e7e:	f7ff f90c 	bl	80a009a <_Znwj>
 80a0e82:	4605      	mov	r5, r0
 80a0e84:	b150      	cbz	r0, 80a0e9c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a0e86:	4631      	mov	r1, r6
 80a0e88:	f7ff fed5 	bl	80a0c36 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a0e8c:	6930      	ldr	r0, [r6, #16]
 80a0e8e:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a0e92:	b108      	cbz	r0, 80a0e98 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 80a0e94:	f000 fcf4 	bl	80a1880 <strdup>
 80a0e98:	6128      	str	r0, [r5, #16]
 80a0e9a:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a0e9c:	6025      	str	r5, [r4, #0]
 80a0e9e:	e00a      	b.n	80a0eb6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a0ea0:	6804      	ldr	r4, [r0, #0]
 80a0ea2:	b144      	cbz	r4, 80a0eb6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80a0ea4:	6920      	ldr	r0, [r4, #16]
 80a0ea6:	f7ff fbf7 	bl	80a0698 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0eaa:	4620      	mov	r0, r4
 80a0eac:	f7ff fd7f 	bl	80a09ae <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a0eb0:	4620      	mov	r0, r4
 80a0eb2:	f7ff f8f4 	bl	80a009e <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a0eb6:	2000      	movs	r0, #0
 80a0eb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0eba <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a0eba:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0ebc:	2300      	movs	r3, #0
 80a0ebe:	6083      	str	r3, [r0, #8]
 80a0ec0:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a0ec2:	4604      	mov	r4, r0
 80a0ec4:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a0ec6:	b12b      	cbz	r3, 80a0ed4 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a0ec8:	2202      	movs	r2, #2
 80a0eca:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a0ecc:	68eb      	ldr	r3, [r5, #12]
 80a0ece:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a0ed0:	68ab      	ldr	r3, [r5, #8]
 80a0ed2:	60a3      	str	r3, [r4, #8]
	}
    }
 80a0ed4:	4620      	mov	r0, r4
 80a0ed6:	bd38      	pop	{r3, r4, r5, pc}

080a0ed8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a0ed8:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a0eda:	b570      	push	{r4, r5, r6, lr}
 80a0edc:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a0ede:	d006      	beq.n	80a0eee <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 80a0ee0:	2a03      	cmp	r2, #3
 80a0ee2:	d011      	beq.n	80a0f08 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 80a0ee4:	2a01      	cmp	r2, #1
 80a0ee6:	d117      	bne.n	80a0f18 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a0ee8:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a0eea:	6003      	str	r3, [r0, #0]
	      break;
 80a0eec:	e014      	b.n	80a0f18 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a0eee:	2014      	movs	r0, #20
 80a0ef0:	680e      	ldr	r6, [r1, #0]
 80a0ef2:	f7ff f8d2 	bl	80a009a <_Znwj>
 80a0ef6:	4605      	mov	r5, r0
 80a0ef8:	b120      	cbz	r0, 80a0f04 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a0efa:	4631      	mov	r1, r6
 80a0efc:	f7ff ffdd 	bl	80a0eba <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a0f00:	7c33      	ldrb	r3, [r6, #16]
 80a0f02:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a0f04:	6025      	str	r5, [r4, #0]
 80a0f06:	e007      	b.n	80a0f18 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a0f08:	6804      	ldr	r4, [r0, #0]
 80a0f0a:	b12c      	cbz	r4, 80a0f18 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0f0c:	4620      	mov	r0, r4
 80a0f0e:	f7ff fd4e 	bl	80a09ae <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a0f12:	4620      	mov	r0, r4
 80a0f14:	f7ff f8c3 	bl	80a009e <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a0f18:	2000      	movs	r0, #0
 80a0f1a:	bd70      	pop	{r4, r5, r6, pc}

080a0f1c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 80a0f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0f1e:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a0f20:	f3bf 8f5f 	dmb	sy
 80a0f24:	b087      	sub	sp, #28
 80a0f26:	2300      	movs	r3, #0
 80a0f28:	e850 6f00 	ldrex	r6, [r0]
 80a0f2c:	e840 3200 	strex	r2, r3, [r0]
 80a0f30:	2a00      	cmp	r2, #0
 80a0f32:	d1f9      	bne.n	80a0f28 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 80a0f34:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a0f38:	2e00      	cmp	r6, #0
 80a0f3a:	d03e      	beq.n	80a0fba <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x9e>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a0f3c:	4618      	mov	r0, r3
 80a0f3e:	f7ff fb67 	bl	80a0610 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a0f42:	4607      	mov	r7, r0
 80a0f44:	b120      	cbz	r0, 80a0f50 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a0f46:	4621      	mov	r1, r4
 80a0f48:	4630      	mov	r0, r6
 80a0f4a:	f7ff fe64 	bl	80a0c16 <_ZNKSt8functionIFvRKbEEclES1_>
 80a0f4e:	e02e      	b.n	80a0fae <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a0f50:	4631      	mov	r1, r6
 80a0f52:	a801      	add	r0, sp, #4
 80a0f54:	f7ff ffb1 	bl	80a0eba <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a0f58:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a0f5a:	2010      	movs	r0, #16
 80a0f5c:	f88d 3014 	strb.w	r3, [sp, #20]
 80a0f60:	f7ff f89b 	bl	80a009a <_Znwj>
 80a0f64:	4605      	mov	r5, r0
 80a0f66:	b1d0      	cbz	r0, 80a0f9e <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0f68:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0f6a:	2014      	movs	r0, #20
 80a0f6c:	f7ff f895 	bl	80a009a <_Znwj>
 80a0f70:	4604      	mov	r4, r0
 80a0f72:	b178      	cbz	r0, 80a0f94 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0f74:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a0f76:	4601      	mov	r1, r0
 80a0f78:	a801      	add	r0, sp, #4
 80a0f7a:	f7ff fd27 	bl	80a09cc <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0f7e:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a0f80:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0f82:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0f84:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a0f86:	9203      	str	r2, [sp, #12]
 80a0f88:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0f8a:	60e3      	str	r3, [r4, #12]
 80a0f8c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a0f90:	9204      	str	r2, [sp, #16]
 80a0f92:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a0f94:	4b0a      	ldr	r3, [pc, #40]	; (80a0fc0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0f96:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a0f98:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a0f9a:	4b0a      	ldr	r3, [pc, #40]	; (80a0fc4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 80a0f9c:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0f9e:	a801      	add	r0, sp, #4
 80a0fa0:	f7ff fd05 	bl	80a09ae <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a0fa4:	2200      	movs	r2, #0
 80a0fa6:	4629      	mov	r1, r5
 80a0fa8:	4807      	ldr	r0, [pc, #28]	; (80a0fc8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 80a0faa:	f7ff fb39 	bl	80a0620 <application_thread_invoke>
 80a0fae:	4630      	mov	r0, r6
 80a0fb0:	f7ff fcfd 	bl	80a09ae <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a0fb4:	4630      	mov	r0, r6
 80a0fb6:	f7ff f872 	bl	80a009e <_ZdlPv>
        }
    }
 80a0fba:	b007      	add	sp, #28
 80a0fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0fbe:	bf00      	nop
 80a0fc0:	080a0c29 	.word	0x080a0c29
 80a0fc4:	080a0ed9 	.word	0x080a0ed9
 80a0fc8:	080a12f9 	.word	0x080a12f9

080a0fcc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a0fcc:	b530      	push	{r4, r5, lr}
 80a0fce:	4604      	mov	r4, r0
 80a0fd0:	b085      	sub	sp, #20
 80a0fd2:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a0fd4:	4668      	mov	r0, sp
 80a0fd6:	4611      	mov	r1, r2
 80a0fd8:	f7ff fdf0 	bl	80a0bbc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a0fdc:	b17c      	cbz	r4, 80a0ffe <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a0fde:	b224      	sxth	r4, r4
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a0fe0:	4628      	mov	r0, r5
 80a0fe2:	b10d      	cbz	r5, 80a0fe8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 80a0fe4:	f000 fc4c 	bl	80a1880 <strdup>
 80a0fe8:	9002      	str	r0, [sp, #8]
 80a0fea:	a902      	add	r1, sp, #8
 80a0fec:	4668      	mov	r0, sp
 80a0fee:	f8ad 400c 	strh.w	r4, [sp, #12]
 80a0ff2:	f7ff fe2f 	bl	80a0c54 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80a0ff6:	9802      	ldr	r0, [sp, #8]
 80a0ff8:	f7ff fb4e 	bl	80a0698 <free>
 80a0ffc:	e01d      	b.n	80a103a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a0ffe:	f04f 0201 	mov.w	r2, #1
 80a1002:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a1004:	f88d 4008 	strb.w	r4, [sp, #8]
 80a1008:	e8d0 3f4f 	ldrexb	r3, [r0]
 80a100c:	42a3      	cmp	r3, r4
 80a100e:	d103      	bne.n	80a1018 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 80a1010:	e8c0 2f41 	strexb	r1, r2, [r0]
 80a1014:	2900      	cmp	r1, #0
 80a1016:	d1f7      	bne.n	80a1008 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 80a1018:	d002      	beq.n	80a1020 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 80a101a:	f88d 3008 	strb.w	r3, [sp, #8]
 80a101e:	e00c      	b.n	80a103a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 80a1020:	f110 010c 	adds.w	r1, r0, #12
 80a1024:	f04f 0301 	mov.w	r3, #1
 80a1028:	bf18      	it	ne
 80a102a:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a102c:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 80a1030:	3004      	adds	r0, #4
 80a1032:	f800 3c03 	strb.w	r3, [r0, #-3]
 80a1036:	f7ff ff71 	bl	80a0f1c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 80a103a:	a801      	add	r0, sp, #4
 80a103c:	f7ff f839 	bl	80a00b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 80a1040:	b005      	add	sp, #20
 80a1042:	bd30      	pop	{r4, r5, pc}

080a1044 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a1044:	4770      	bx	lr

080a1046 <_ZN9IPAddressD0Ev>:
 80a1046:	b510      	push	{r4, lr}
 80a1048:	4604      	mov	r4, r0
 80a104a:	f7ff f828 	bl	80a009e <_ZdlPv>
 80a104e:	4620      	mov	r0, r4
 80a1050:	bd10      	pop	{r4, pc}

080a1052 <_ZNK9IPAddress7printToER5Print>:
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a1052:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1054:	460f      	mov	r7, r1
 80a1056:	f100 0608 	add.w	r6, r0, #8
 80a105a:	1d05      	adds	r5, r0, #4
 80a105c:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a105e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a1062:	220a      	movs	r2, #10
 80a1064:	4638      	mov	r0, r7
 80a1066:	f7ff fc84 	bl	80a0972 <_ZN5Print5printEhi>
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a106a:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a106c:	4404      	add	r4, r0
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a106e:	d007      	beq.n	80a1080 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a1070:	2c00      	cmp	r4, #0
 80a1072:	d0f4      	beq.n	80a105e <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a1074:	212e      	movs	r1, #46	; 0x2e
 80a1076:	4638      	mov	r0, r7
 80a1078:	f7ff fc4e 	bl	80a0918 <_ZN5Print5printEc>
 80a107c:	4404      	add	r4, r0
 80a107e:	e7ee      	b.n	80a105e <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a1080:	4620      	mov	r0, r4
 80a1082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1084 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a1084:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a1086:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a108a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a108e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a1092:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a1096:	2304      	movs	r3, #4
 80a1098:	6041      	str	r1, [r0, #4]
 80a109a:	7503      	strb	r3, [r0, #20]
 80a109c:	bd10      	pop	{r4, pc}
	...

080a10a0 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a10a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a10a2:	4d04      	ldr	r5, [pc, #16]	; (80a10b4 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a10a4:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a10a6:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a10aa:	9500      	str	r5, [sp, #0]
 80a10ac:	f7ff ffea 	bl	80a1084 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a10b0:	b003      	add	sp, #12
 80a10b2:	bd30      	pop	{r4, r5, pc}
 80a10b4:	080a1a78 	.word	0x080a1a78

080a10b8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a10b8:	7441      	strb	r1, [r0, #17]
 80a10ba:	4770      	bx	lr

080a10bc <_ZN9USBSerialD1Ev>:
#include "spark_wiring_platform.h"
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"

class USBSerial : public Stream
 80a10bc:	4770      	bx	lr

080a10be <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
 80a10be:	2100      	movs	r1, #0
 80a10c0:	7c00      	ldrb	r0, [r0, #16]
 80a10c2:	f7ff ba7d 	b.w	80a05c0 <HAL_USB_USART_Receive_Data>

080a10c6 <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
 80a10c6:	2101      	movs	r1, #1
 80a10c8:	7c00      	ldrb	r0, [r0, #16]
 80a10ca:	f7ff ba79 	b.w	80a05c0 <HAL_USB_USART_Receive_Data>

080a10ce <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
 80a10ce:	7c00      	ldrb	r0, [r0, #16]
 80a10d0:	f7ff ba6e 	b.w	80a05b0 <HAL_USB_USART_Available_Data_For_Write>

080a10d4 <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
 80a10d4:	7c00      	ldrb	r0, [r0, #16]
 80a10d6:	f7ff ba63 	b.w	80a05a0 <HAL_USB_USART_Available_Data>

080a10da <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
 80a10da:	b538      	push	{r3, r4, r5, lr}
 80a10dc:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a10de:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
 80a10e0:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a10e2:	f7ff fa65 	bl	80a05b0 <HAL_USB_USART_Available_Data_For_Write>
 80a10e6:	2800      	cmp	r0, #0
 80a10e8:	dc01      	bgt.n	80a10ee <_ZN9USBSerial5writeEh+0x14>
 80a10ea:	7c60      	ldrb	r0, [r4, #17]
 80a10ec:	b120      	cbz	r0, 80a10f8 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
 80a10ee:	4629      	mov	r1, r5
 80a10f0:	7c20      	ldrb	r0, [r4, #16]
 80a10f2:	f7ff fa6d 	bl	80a05d0 <HAL_USB_USART_Send_Data>
    return 1;
 80a10f6:	2001      	movs	r0, #1
  }
  return 0;
}
 80a10f8:	bd38      	pop	{r3, r4, r5, pc}

080a10fa <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a10fa:	7c00      	ldrb	r0, [r0, #16]
 80a10fc:	f7ff ba70 	b.w	80a05e0 <HAL_USB_USART_Flush_Data>

080a1100 <_ZN9USBSerialD0Ev>:
 80a1100:	b510      	push	{r4, lr}
 80a1102:	4604      	mov	r4, r0
 80a1104:	f7fe ffcb 	bl	80a009e <_ZdlPv>
 80a1108:	4620      	mov	r0, r4
 80a110a:	bd10      	pop	{r4, pc}

080a110c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a110c:	b510      	push	{r4, lr}
 80a110e:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a1110:	2300      	movs	r3, #0
 80a1112:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a1114:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1118:	60a3      	str	r3, [r4, #8]
 80a111a:	4b05      	ldr	r3, [pc, #20]	; (80a1130 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a111c:	4608      	mov	r0, r1
 80a111e:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a1120:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a1122:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a1124:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a1126:	4611      	mov	r1, r2
 80a1128:	f7ff fa32 	bl	80a0590 <HAL_USB_USART_Init>
}
 80a112c:	4620      	mov	r0, r4
 80a112e:	bd10      	pop	{r4, pc}
 80a1130:	080a1a8c 	.word	0x080a1a8c

080a1134 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a1134:	b510      	push	{r4, lr}
 80a1136:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1138:	2214      	movs	r2, #20
 80a113a:	2100      	movs	r1, #0
 80a113c:	f000 fb6f 	bl	80a181e <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a1140:	4b05      	ldr	r3, [pc, #20]	; (80a1158 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a1142:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a1144:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a1146:	4b05      	ldr	r3, [pc, #20]	; (80a115c <_Z19acquireSerialBufferv+0x28>)
 80a1148:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a114a:	f240 1301 	movw	r3, #257	; 0x101
 80a114e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1150:	2381      	movs	r3, #129	; 0x81
 80a1152:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a1154:	bd10      	pop	{r4, pc}
 80a1156:	bf00      	nop
 80a1158:	2000043d 	.word	0x2000043d
 80a115c:	200003bc 	.word	0x200003bc

080a1160 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a1160:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1162:	4d0e      	ldr	r5, [pc, #56]	; (80a119c <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a1164:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a1166:	a801      	add	r0, sp, #4
 80a1168:	f7ff ffe4 	bl	80a1134 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a116c:	6829      	ldr	r1, [r5, #0]
 80a116e:	f011 0401 	ands.w	r4, r1, #1
 80a1172:	d110      	bne.n	80a1196 <_Z16_fetch_usbserialv+0x36>
 80a1174:	4628      	mov	r0, r5
 80a1176:	f7fe ff94 	bl	80a00a2 <__cxa_guard_acquire>
 80a117a:	b160      	cbz	r0, 80a1196 <_Z16_fetch_usbserialv+0x36>
 80a117c:	aa01      	add	r2, sp, #4
 80a117e:	4621      	mov	r1, r4
 80a1180:	4807      	ldr	r0, [pc, #28]	; (80a11a0 <_Z16_fetch_usbserialv+0x40>)
 80a1182:	f7ff ffc3 	bl	80a110c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1186:	4628      	mov	r0, r5
 80a1188:	f7fe ff90 	bl	80a00ac <__cxa_guard_release>
 80a118c:	4a05      	ldr	r2, [pc, #20]	; (80a11a4 <_Z16_fetch_usbserialv+0x44>)
 80a118e:	4906      	ldr	r1, [pc, #24]	; (80a11a8 <_Z16_fetch_usbserialv+0x48>)
 80a1190:	4803      	ldr	r0, [pc, #12]	; (80a11a0 <_Z16_fetch_usbserialv+0x40>)
 80a1192:	f000 f9db 	bl	80a154c <__aeabi_atexit>
	return _usbserial;
}
 80a1196:	4802      	ldr	r0, [pc, #8]	; (80a11a0 <_Z16_fetch_usbserialv+0x40>)
 80a1198:	b007      	add	sp, #28
 80a119a:	bd30      	pop	{r4, r5, pc}
 80a119c:	200003b8 	.word	0x200003b8
 80a11a0:	20000540 	.word	0x20000540
 80a11a4:	20000378 	.word	0x20000378
 80a11a8:	080a10bd 	.word	0x080a10bd

080a11ac <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a11ac:	b510      	push	{r4, lr}
 80a11ae:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a11b0:	2214      	movs	r2, #20
 80a11b2:	2100      	movs	r1, #0
 80a11b4:	f000 fb33 	bl	80a181e <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a11b8:	4b05      	ldr	r3, [pc, #20]	; (80a11d0 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a11ba:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a11bc:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a11be:	4b05      	ldr	r3, [pc, #20]	; (80a11d4 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a11c0:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a11c2:	f240 1301 	movw	r3, #257	; 0x101
 80a11c6:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a11c8:	2381      	movs	r3, #129	; 0x81
 80a11ca:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a11cc:	bd10      	pop	{r4, pc}
 80a11ce:	bf00      	nop
 80a11d0:	200005f0 	.word	0x200005f0
 80a11d4:	20000558 	.word	0x20000558

080a11d8 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a11d8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a11da:	4c0e      	ldr	r4, [pc, #56]	; (80a1214 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a11dc:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a11de:	a801      	add	r0, sp, #4
 80a11e0:	f7ff ffe4 	bl	80a11ac <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a11e4:	6823      	ldr	r3, [r4, #0]
 80a11e6:	07db      	lsls	r3, r3, #31
 80a11e8:	d410      	bmi.n	80a120c <_Z17_fetch_usbserial1v+0x34>
 80a11ea:	4620      	mov	r0, r4
 80a11ec:	f7fe ff59 	bl	80a00a2 <__cxa_guard_acquire>
 80a11f0:	b160      	cbz	r0, 80a120c <_Z17_fetch_usbserial1v+0x34>
 80a11f2:	aa01      	add	r2, sp, #4
 80a11f4:	2101      	movs	r1, #1
 80a11f6:	4808      	ldr	r0, [pc, #32]	; (80a1218 <_Z17_fetch_usbserial1v+0x40>)
 80a11f8:	f7ff ff88 	bl	80a110c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a11fc:	4620      	mov	r0, r4
 80a11fe:	f7fe ff55 	bl	80a00ac <__cxa_guard_release>
 80a1202:	4a06      	ldr	r2, [pc, #24]	; (80a121c <_Z17_fetch_usbserial1v+0x44>)
 80a1204:	4906      	ldr	r1, [pc, #24]	; (80a1220 <_Z17_fetch_usbserial1v+0x48>)
 80a1206:	4804      	ldr	r0, [pc, #16]	; (80a1218 <_Z17_fetch_usbserial1v+0x40>)
 80a1208:	f000 f9a0 	bl	80a154c <__aeabi_atexit>
  return _usbserial1;
}
 80a120c:	4802      	ldr	r0, [pc, #8]	; (80a1218 <_Z17_fetch_usbserial1v+0x40>)
 80a120e:	b006      	add	sp, #24
 80a1210:	bd10      	pop	{r4, pc}
 80a1212:	bf00      	nop
 80a1214:	20000554 	.word	0x20000554
 80a1218:	200005dc 	.word	0x200005dc
 80a121c:	20000378 	.word	0x20000378
 80a1220:	080a10bd 	.word	0x080a10bd

080a1224 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a1224:	4770      	bx	lr

080a1226 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1226:	7441      	strb	r1, [r0, #17]
 80a1228:	4770      	bx	lr

080a122a <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
 80a122a:	7c00      	ldrb	r0, [r0, #16]
 80a122c:	f7ff b96e 	b.w	80a050c <HAL_USART_Available_Data_For_Write>

080a1230 <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
 80a1230:	7c00      	ldrb	r0, [r0, #16]
 80a1232:	f7ff b943 	b.w	80a04bc <HAL_USART_Available_Data>

080a1236 <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
 80a1236:	7c00      	ldrb	r0, [r0, #16]
 80a1238:	f7ff b950 	b.w	80a04dc <HAL_USART_Peek_Data>

080a123c <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
 80a123c:	7c00      	ldrb	r0, [r0, #16]
 80a123e:	f7ff b945 	b.w	80a04cc <HAL_USART_Read_Data>

080a1242 <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a1242:	7c00      	ldrb	r0, [r0, #16]
 80a1244:	f7ff b952 	b.w	80a04ec <HAL_USART_Flush_Data>

080a1248 <_ZN11USARTSerialD0Ev>:
 80a1248:	b510      	push	{r4, lr}
 80a124a:	4604      	mov	r4, r0
 80a124c:	f7fe ff27 	bl	80a009e <_ZdlPv>
 80a1250:	4620      	mov	r0, r4
 80a1252:	bd10      	pop	{r4, pc}

080a1254 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a1254:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a1256:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a1258:	4604      	mov	r4, r0
 80a125a:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a125c:	b925      	cbnz	r5, 80a1268 <_ZN11USARTSerial5writeEh+0x14>
 80a125e:	7c00      	ldrb	r0, [r0, #16]
 80a1260:	f7ff f954 	bl	80a050c <HAL_USART_Available_Data_For_Write>
 80a1264:	2800      	cmp	r0, #0
 80a1266:	dd05      	ble.n	80a1274 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a1268:	4631      	mov	r1, r6
 80a126a:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a126c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a1270:	f7ff b91c 	b.w	80a04ac <HAL_USART_Write_Data>
  }
  return 0;
}
 80a1274:	4628      	mov	r0, r5
 80a1276:	bd70      	pop	{r4, r5, r6, pc}

080a1278 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a1278:	b510      	push	{r4, lr}
 80a127a:	4604      	mov	r4, r0
 80a127c:	4608      	mov	r0, r1
 80a127e:	4611      	mov	r1, r2
 80a1280:	2200      	movs	r2, #0
 80a1282:	6062      	str	r2, [r4, #4]
 80a1284:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a1288:	60a2      	str	r2, [r4, #8]
 80a128a:	4a05      	ldr	r2, [pc, #20]	; (80a12a0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a128c:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a128e:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a1290:	2201      	movs	r2, #1
 80a1292:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a1294:	461a      	mov	r2, r3
 80a1296:	f7ff f901 	bl	80a049c <HAL_USART_Init>
}
 80a129a:	4620      	mov	r0, r4
 80a129c:	bd10      	pop	{r4, pc}
 80a129e:	bf00      	nop
 80a12a0:	080a1abc 	.word	0x080a1abc

080a12a4 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a12a4:	7c00      	ldrb	r0, [r0, #16]
 80a12a6:	f7ff b929 	b.w	80a04fc <HAL_USART_Is_Enabled>
	...

080a12ac <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a12ac:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a12ae:	4d0c      	ldr	r5, [pc, #48]	; (80a12e0 <_Z22__fetch_global_Serial1v+0x34>)
 80a12b0:	6829      	ldr	r1, [r5, #0]
 80a12b2:	f011 0401 	ands.w	r4, r1, #1
 80a12b6:	d111      	bne.n	80a12dc <_Z22__fetch_global_Serial1v+0x30>
 80a12b8:	4628      	mov	r0, r5
 80a12ba:	f7fe fef2 	bl	80a00a2 <__cxa_guard_acquire>
 80a12be:	b168      	cbz	r0, 80a12dc <_Z22__fetch_global_Serial1v+0x30>
 80a12c0:	4a08      	ldr	r2, [pc, #32]	; (80a12e4 <_Z22__fetch_global_Serial1v+0x38>)
 80a12c2:	4621      	mov	r1, r4
 80a12c4:	4b08      	ldr	r3, [pc, #32]	; (80a12e8 <_Z22__fetch_global_Serial1v+0x3c>)
 80a12c6:	4809      	ldr	r0, [pc, #36]	; (80a12ec <_Z22__fetch_global_Serial1v+0x40>)
 80a12c8:	f7ff ffd6 	bl	80a1278 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a12cc:	4628      	mov	r0, r5
 80a12ce:	f7fe feed 	bl	80a00ac <__cxa_guard_release>
 80a12d2:	4a07      	ldr	r2, [pc, #28]	; (80a12f0 <_Z22__fetch_global_Serial1v+0x44>)
 80a12d4:	4907      	ldr	r1, [pc, #28]	; (80a12f4 <_Z22__fetch_global_Serial1v+0x48>)
 80a12d6:	4805      	ldr	r0, [pc, #20]	; (80a12ec <_Z22__fetch_global_Serial1v+0x40>)
 80a12d8:	f000 f938 	bl	80a154c <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a12dc:	4803      	ldr	r0, [pc, #12]	; (80a12ec <_Z22__fetch_global_Serial1v+0x40>)
 80a12de:	bd38      	pop	{r3, r4, r5, pc}
 80a12e0:	2000078c 	.word	0x2000078c
 80a12e4:	20000790 	.word	0x20000790
 80a12e8:	20000708 	.word	0x20000708
 80a12ec:	200006f4 	.word	0x200006f4
 80a12f0:	20000378 	.word	0x20000378
 80a12f4:	080a1225 	.word	0x080a1225

080a12f8 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a12f8:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a12fa:	6883      	ldr	r3, [r0, #8]
 80a12fc:	4604      	mov	r4, r0
 80a12fe:	b90b      	cbnz	r3, 80a1304 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a1300:	f000 f929 	bl	80a1556 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1304:	68c3      	ldr	r3, [r0, #12]
 80a1306:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 80a1308:	68a3      	ldr	r3, [r4, #8]
 80a130a:	b11b      	cbz	r3, 80a1314 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a130c:	2203      	movs	r2, #3
 80a130e:	4621      	mov	r1, r4
 80a1310:	4620      	mov	r0, r4
 80a1312:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a1314:	4620      	mov	r0, r4
}
 80a1316:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a131a:	f7fe bec0 	b.w	80a009e <_ZdlPv>

080a131e <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a131e:	4770      	bx	lr

080a1320 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a1320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1322:	4606      	mov	r6, r0
 80a1324:	4615      	mov	r5, r2
 80a1326:	460c      	mov	r4, r1
 80a1328:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a132a:	42bc      	cmp	r4, r7
 80a132c:	d006      	beq.n	80a133c <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a132e:	6833      	ldr	r3, [r6, #0]
 80a1330:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a1334:	689b      	ldr	r3, [r3, #8]
 80a1336:	4630      	mov	r0, r6
 80a1338:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a133a:	e7f6      	b.n	80a132a <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a133c:	4628      	mov	r0, r5
 80a133e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1340 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a1340:	2200      	movs	r2, #0
 80a1342:	7c00      	ldrb	r0, [r0, #16]
 80a1344:	f7ff b8ea 	b.w	80a051c <HAL_I2C_Write_Data>

080a1348 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a1348:	2100      	movs	r1, #0
 80a134a:	7c00      	ldrb	r0, [r0, #16]
 80a134c:	f7ff b8ee 	b.w	80a052c <HAL_I2C_Available_Data>

080a1350 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a1350:	2100      	movs	r1, #0
 80a1352:	7c00      	ldrb	r0, [r0, #16]
 80a1354:	f7ff b8f2 	b.w	80a053c <HAL_I2C_Read_Data>

080a1358 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a1358:	2100      	movs	r1, #0
 80a135a:	7c00      	ldrb	r0, [r0, #16]
 80a135c:	f7ff b8f6 	b.w	80a054c <HAL_I2C_Peek_Data>

080a1360 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a1360:	2100      	movs	r1, #0
 80a1362:	7c00      	ldrb	r0, [r0, #16]
 80a1364:	f7ff b8fa 	b.w	80a055c <HAL_I2C_Flush_Data>

080a1368 <_ZN7TwoWireD0Ev>:
 80a1368:	b510      	push	{r4, lr}
 80a136a:	4604      	mov	r4, r0
 80a136c:	f7fe fe97 	bl	80a009e <_ZdlPv>
 80a1370:	4620      	mov	r0, r4
 80a1372:	bd10      	pop	{r4, pc}

080a1374 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a1374:	b510      	push	{r4, lr}
 80a1376:	4604      	mov	r4, r0
 80a1378:	4608      	mov	r0, r1
 80a137a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a137e:	60a3      	str	r3, [r4, #8]
 80a1380:	4b04      	ldr	r3, [pc, #16]	; (80a1394 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
 80a1382:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a1384:	7420      	strb	r0, [r4, #16]
 80a1386:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a1388:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a138a:	f7ff f8f7 	bl	80a057c <HAL_I2C_Init>

}
 80a138e:	4620      	mov	r0, r4
 80a1390:	bd10      	pop	{r4, pc}
 80a1392:	bf00      	nop
 80a1394:	080a1aec 	.word	0x080a1aec

080a1398 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a1398:	2100      	movs	r1, #0
 80a139a:	7c00      	ldrb	r0, [r0, #16]
 80a139c:	f7ff b8e6 	b.w	80a056c <HAL_I2C_Is_Enabled>

080a13a0 <_ZN5spark9WiFiClassD1Ev>:
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() {}
    ~WiFiClass() {}
 80a13a0:	4770      	bx	lr

080a13a2 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a13a2:	2200      	movs	r2, #0
 80a13a4:	4611      	mov	r1, r2
 80a13a6:	4610      	mov	r0, r2
 80a13a8:	f7ff b956 	b.w	80a0658 <network_ready>

080a13ac <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    void setIPAddressSource(IPAddressSource source) {
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() {}
 80a13ac:	4803      	ldr	r0, [pc, #12]	; (80a13bc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a13ae:	4b04      	ldr	r3, [pc, #16]	; (80a13c0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x14>)
one second timeout is reached). If the aforementioned "bug" is ever fixed by
TI, no changes need to be made to this function, as it would be implemented
the same way.
*****************************************************************************/

    WiFiClass WiFi;
 80a13b0:	4a04      	ldr	r2, [pc, #16]	; (80a13c4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x18>)
 80a13b2:	4905      	ldr	r1, [pc, #20]	; (80a13c8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x1c>)
 80a13b4:	6003      	str	r3, [r0, #0]
 80a13b6:	f000 b8c9 	b.w	80a154c <__aeabi_atexit>
 80a13ba:	bf00      	nop
 80a13bc:	20000814 	.word	0x20000814
 80a13c0:	080a1b14 	.word	0x080a1b14
 80a13c4:	20000378 	.word	0x20000378
 80a13c8:	080a13a1 	.word	0x080a13a1

080a13cc <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a13cc:	b510      	push	{r4, lr}
 80a13ce:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a13d0:	480f      	ldr	r0, [pc, #60]	; (80a1410 <pinAvailable+0x44>)
 80a13d2:	f7ff f99d 	bl	80a0710 <_ZN8SPIClass9isEnabledEv>
 80a13d6:	b128      	cbz	r0, 80a13e4 <pinAvailable+0x18>
 80a13d8:	f1a4 030d 	sub.w	r3, r4, #13
 80a13dc:	2b02      	cmp	r3, #2
 80a13de:	d801      	bhi.n	80a13e4 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a13e0:	2000      	movs	r0, #0
 80a13e2:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a13e4:	f000 f892 	bl	80a150c <_Z19__fetch_global_Wirev>
 80a13e8:	f7ff ffd6 	bl	80a1398 <_ZN7TwoWire9isEnabledEv>
 80a13ec:	b108      	cbz	r0, 80a13f2 <pinAvailable+0x26>
 80a13ee:	2c01      	cmp	r4, #1
 80a13f0:	d9f6      	bls.n	80a13e0 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a13f2:	f7ff ff5b 	bl	80a12ac <_Z22__fetch_global_Serial1v>
 80a13f6:	f7ff ff55 	bl	80a12a4 <_ZN11USARTSerial9isEnabledEv>
 80a13fa:	b118      	cbz	r0, 80a1404 <pinAvailable+0x38>
 80a13fc:	f1a4 0312 	sub.w	r3, r4, #18
 80a1400:	2b01      	cmp	r3, #1
 80a1402:	d9ed      	bls.n	80a13e0 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a1404:	2c17      	cmp	r4, #23
 80a1406:	bf8c      	ite	hi
 80a1408:	2000      	movhi	r0, #0
 80a140a:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a140c:	bd10      	pop	{r4, pc}
 80a140e:	bf00      	nop
 80a1410:	20000818 	.word	0x20000818

080a1414 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a1414:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a1416:	b538      	push	{r3, r4, r5, lr}
 80a1418:	4604      	mov	r4, r0
 80a141a:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a141c:	d80a      	bhi.n	80a1434 <pinMode+0x20>
 80a141e:	29ff      	cmp	r1, #255	; 0xff
 80a1420:	d008      	beq.n	80a1434 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a1422:	f7ff ffd3 	bl	80a13cc <pinAvailable>
 80a1426:	b128      	cbz	r0, 80a1434 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a1428:	4629      	mov	r1, r5
 80a142a:	4620      	mov	r0, r4
}
 80a142c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a1430:	f7fe bfe4 	b.w	80a03fc <HAL_Pin_Mode>
 80a1434:	bd38      	pop	{r3, r4, r5, pc}

080a1436 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a1436:	b538      	push	{r3, r4, r5, lr}
 80a1438:	4604      	mov	r4, r0
 80a143a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a143c:	f7fe ffe6 	bl	80a040c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a1440:	28ff      	cmp	r0, #255	; 0xff
 80a1442:	d010      	beq.n	80a1466 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a1444:	2806      	cmp	r0, #6
 80a1446:	d804      	bhi.n	80a1452 <digitalWrite+0x1c>
 80a1448:	234d      	movs	r3, #77	; 0x4d
 80a144a:	fa23 f000 	lsr.w	r0, r3, r0
 80a144e:	07c3      	lsls	r3, r0, #31
 80a1450:	d409      	bmi.n	80a1466 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a1452:	4620      	mov	r0, r4
 80a1454:	f7ff ffba 	bl	80a13cc <pinAvailable>
 80a1458:	b128      	cbz	r0, 80a1466 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a145a:	4629      	mov	r1, r5
 80a145c:	4620      	mov	r0, r4
}
 80a145e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a1462:	f7fe bfdb 	b.w	80a041c <HAL_GPIO_Write>
 80a1466:	bd38      	pop	{r3, r4, r5, pc}

080a1468 <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 80a1468:	b510      	push	{r4, lr}
 80a146a:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 80a146c:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 80a146e:	bf9c      	itt	ls
 80a1470:	340a      	addls	r4, #10
 80a1472:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a1474:	4620      	mov	r0, r4
 80a1476:	f7ff ffa9 	bl	80a13cc <pinAvailable>
 80a147a:	b150      	cbz	r0, 80a1492 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 80a147c:	2103      	movs	r1, #3
 80a147e:	4620      	mov	r0, r4
 80a1480:	f7fe ffb4 	bl	80a03ec <HAL_Validate_Pin_Function>
 80a1484:	2803      	cmp	r0, #3
 80a1486:	d104      	bne.n	80a1492 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 80a1488:	4620      	mov	r0, r4
}
 80a148a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 80a148e:	f7fe bfcd 	b.w	80a042c <HAL_ADC_Read>
}
 80a1492:	2000      	movs	r0, #0
 80a1494:	bd10      	pop	{r4, pc}
	...

080a1498 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a1498:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a149a:	4c0c      	ldr	r4, [pc, #48]	; (80a14cc <_GLOBAL__sub_I_SPI+0x34>)
 80a149c:	4e0c      	ldr	r6, [pc, #48]	; (80a14d0 <_GLOBAL__sub_I_SPI+0x38>)
 80a149e:	4d0d      	ldr	r5, [pc, #52]	; (80a14d4 <_GLOBAL__sub_I_SPI+0x3c>)
 80a14a0:	2100      	movs	r1, #0
 80a14a2:	4620      	mov	r0, r4
 80a14a4:	f7ff f920 	bl	80a06e8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a14a8:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a14aa:	4c0b      	ldr	r4, [pc, #44]	; (80a14d8 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a14ac:	4632      	mov	r2, r6
 80a14ae:	4629      	mov	r1, r5
 80a14b0:	f000 f84c 	bl	80a154c <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a14b4:	2101      	movs	r1, #1
 80a14b6:	4620      	mov	r0, r4
 80a14b8:	f7ff f916 	bl	80a06e8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a14bc:	4632      	mov	r2, r6
 80a14be:	4629      	mov	r1, r5
 80a14c0:	4620      	mov	r0, r4
 80a14c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a14c6:	f000 b841 	b.w	80a154c <__aeabi_atexit>
 80a14ca:	bf00      	nop
 80a14cc:	20000818 	.word	0x20000818
 80a14d0:	20000378 	.word	0x20000378
 80a14d4:	080a06d9 	.word	0x080a06d9
 80a14d8:	20000828 	.word	0x20000828

080a14dc <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a14dc:	b513      	push	{r0, r1, r4, lr}
 80a14de:	4c08      	ldr	r4, [pc, #32]	; (80a1500 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a14e0:	2300      	movs	r3, #0
 80a14e2:	461a      	mov	r2, r3
 80a14e4:	4619      	mov	r1, r3
 80a14e6:	9300      	str	r3, [sp, #0]
 80a14e8:	4620      	mov	r0, r4
 80a14ea:	f7ff fdd9 	bl	80a10a0 <_ZN9IPAddressC1Ehhhh>
 80a14ee:	4620      	mov	r0, r4
 80a14f0:	4a04      	ldr	r2, [pc, #16]	; (80a1504 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a14f2:	4905      	ldr	r1, [pc, #20]	; (80a1508 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a14f4:	b002      	add	sp, #8
 80a14f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a14fa:	f000 b827 	b.w	80a154c <__aeabi_atexit>
 80a14fe:	bf00      	nop
 80a1500:	2000083c 	.word	0x2000083c
 80a1504:	20000378 	.word	0x20000378
 80a1508:	080a1045 	.word	0x080a1045

080a150c <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a150c:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a150e:	4d0b      	ldr	r5, [pc, #44]	; (80a153c <_Z19__fetch_global_Wirev+0x30>)
 80a1510:	6829      	ldr	r1, [r5, #0]
 80a1512:	f011 0401 	ands.w	r4, r1, #1
 80a1516:	d10f      	bne.n	80a1538 <_Z19__fetch_global_Wirev+0x2c>
 80a1518:	4628      	mov	r0, r5
 80a151a:	f7fe fdc2 	bl	80a00a2 <__cxa_guard_acquire>
 80a151e:	b158      	cbz	r0, 80a1538 <_Z19__fetch_global_Wirev+0x2c>
 80a1520:	4621      	mov	r1, r4
 80a1522:	4807      	ldr	r0, [pc, #28]	; (80a1540 <_Z19__fetch_global_Wirev+0x34>)
 80a1524:	f7ff ff26 	bl	80a1374 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a1528:	4628      	mov	r0, r5
 80a152a:	f7fe fdbf 	bl	80a00ac <__cxa_guard_release>
 80a152e:	4a05      	ldr	r2, [pc, #20]	; (80a1544 <_Z19__fetch_global_Wirev+0x38>)
 80a1530:	4905      	ldr	r1, [pc, #20]	; (80a1548 <_Z19__fetch_global_Wirev+0x3c>)
 80a1532:	4803      	ldr	r0, [pc, #12]	; (80a1540 <_Z19__fetch_global_Wirev+0x34>)
 80a1534:	f000 f80a 	bl	80a154c <__aeabi_atexit>
	return wire;
}
 80a1538:	4801      	ldr	r0, [pc, #4]	; (80a1540 <_Z19__fetch_global_Wirev+0x34>)
 80a153a:	bd38      	pop	{r3, r4, r5, pc}
 80a153c:	20000854 	.word	0x20000854
 80a1540:	20000858 	.word	0x20000858
 80a1544:	20000378 	.word	0x20000378
 80a1548:	080a131f 	.word	0x080a131f

080a154c <__aeabi_atexit>:
 80a154c:	460b      	mov	r3, r1
 80a154e:	4601      	mov	r1, r0
 80a1550:	4618      	mov	r0, r3
 80a1552:	f000 b94b 	b.w	80a17ec <__cxa_atexit>

080a1556 <_ZSt25__throw_bad_function_callv>:
 80a1556:	b508      	push	{r3, lr}
 80a1558:	f7ff f8ae 	bl	80a06b8 <abort>

080a155c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a155c:	4b18      	ldr	r3, [pc, #96]	; (80a15c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a155e:	681a      	ldr	r2, [r3, #0]
 80a1560:	07d1      	lsls	r1, r2, #31
 80a1562:	bf5c      	itt	pl
 80a1564:	2201      	movpl	r2, #1
 80a1566:	601a      	strpl	r2, [r3, #0]
 80a1568:	4b16      	ldr	r3, [pc, #88]	; (80a15c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a156a:	681a      	ldr	r2, [r3, #0]
 80a156c:	07d2      	lsls	r2, r2, #31
 80a156e:	bf5c      	itt	pl
 80a1570:	2201      	movpl	r2, #1
 80a1572:	601a      	strpl	r2, [r3, #0]
 80a1574:	4b14      	ldr	r3, [pc, #80]	; (80a15c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a1576:	681a      	ldr	r2, [r3, #0]
 80a1578:	07d0      	lsls	r0, r2, #31
 80a157a:	bf5c      	itt	pl
 80a157c:	2201      	movpl	r2, #1
 80a157e:	601a      	strpl	r2, [r3, #0]
 80a1580:	4b12      	ldr	r3, [pc, #72]	; (80a15cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a1582:	681a      	ldr	r2, [r3, #0]
 80a1584:	07d1      	lsls	r1, r2, #31
 80a1586:	bf5c      	itt	pl
 80a1588:	2201      	movpl	r2, #1
 80a158a:	601a      	strpl	r2, [r3, #0]
 80a158c:	4b10      	ldr	r3, [pc, #64]	; (80a15d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a158e:	681a      	ldr	r2, [r3, #0]
 80a1590:	07d2      	lsls	r2, r2, #31
 80a1592:	bf5c      	itt	pl
 80a1594:	2201      	movpl	r2, #1
 80a1596:	601a      	strpl	r2, [r3, #0]
 80a1598:	4b0e      	ldr	r3, [pc, #56]	; (80a15d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a159a:	681a      	ldr	r2, [r3, #0]
 80a159c:	07d0      	lsls	r0, r2, #31
 80a159e:	bf5c      	itt	pl
 80a15a0:	2201      	movpl	r2, #1
 80a15a2:	601a      	strpl	r2, [r3, #0]
 80a15a4:	4b0c      	ldr	r3, [pc, #48]	; (80a15d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a15a6:	681a      	ldr	r2, [r3, #0]
 80a15a8:	07d1      	lsls	r1, r2, #31
 80a15aa:	bf5c      	itt	pl
 80a15ac:	2201      	movpl	r2, #1
 80a15ae:	601a      	strpl	r2, [r3, #0]
 80a15b0:	4b0a      	ldr	r3, [pc, #40]	; (80a15dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a15b2:	681a      	ldr	r2, [r3, #0]
 80a15b4:	07d2      	lsls	r2, r2, #31
 80a15b6:	bf5c      	itt	pl
 80a15b8:	2201      	movpl	r2, #1
 80a15ba:	601a      	strpl	r2, [r3, #0]
 80a15bc:	4770      	bx	lr
 80a15be:	bf00      	nop
 80a15c0:	20000888 	.word	0x20000888
 80a15c4:	20000884 	.word	0x20000884
 80a15c8:	20000880 	.word	0x20000880
 80a15cc:	2000087c 	.word	0x2000087c
 80a15d0:	20000878 	.word	0x20000878
 80a15d4:	20000874 	.word	0x20000874
 80a15d8:	20000870 	.word	0x20000870
 80a15dc:	2000086c 	.word	0x2000086c

080a15e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a15e0:	4b24      	ldr	r3, [pc, #144]	; (80a1674 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a15e2:	681a      	ldr	r2, [r3, #0]
 80a15e4:	07d0      	lsls	r0, r2, #31
 80a15e6:	bf5c      	itt	pl
 80a15e8:	2201      	movpl	r2, #1
 80a15ea:	601a      	strpl	r2, [r3, #0]
 80a15ec:	4b22      	ldr	r3, [pc, #136]	; (80a1678 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a15ee:	681a      	ldr	r2, [r3, #0]
 80a15f0:	07d1      	lsls	r1, r2, #31
 80a15f2:	bf5c      	itt	pl
 80a15f4:	2201      	movpl	r2, #1
 80a15f6:	601a      	strpl	r2, [r3, #0]
 80a15f8:	4b20      	ldr	r3, [pc, #128]	; (80a167c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a15fa:	681a      	ldr	r2, [r3, #0]
 80a15fc:	07d2      	lsls	r2, r2, #31
 80a15fe:	bf5c      	itt	pl
 80a1600:	2201      	movpl	r2, #1
 80a1602:	601a      	strpl	r2, [r3, #0]
 80a1604:	4b1e      	ldr	r3, [pc, #120]	; (80a1680 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a1606:	681a      	ldr	r2, [r3, #0]
 80a1608:	07d0      	lsls	r0, r2, #31
 80a160a:	bf5c      	itt	pl
 80a160c:	2201      	movpl	r2, #1
 80a160e:	601a      	strpl	r2, [r3, #0]
 80a1610:	4b1c      	ldr	r3, [pc, #112]	; (80a1684 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a1612:	681a      	ldr	r2, [r3, #0]
 80a1614:	07d1      	lsls	r1, r2, #31
 80a1616:	bf5c      	itt	pl
 80a1618:	2201      	movpl	r2, #1
 80a161a:	601a      	strpl	r2, [r3, #0]
 80a161c:	4b1a      	ldr	r3, [pc, #104]	; (80a1688 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a161e:	681a      	ldr	r2, [r3, #0]
 80a1620:	07d2      	lsls	r2, r2, #31
 80a1622:	bf5c      	itt	pl
 80a1624:	2201      	movpl	r2, #1
 80a1626:	601a      	strpl	r2, [r3, #0]
 80a1628:	4b18      	ldr	r3, [pc, #96]	; (80a168c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a162a:	681a      	ldr	r2, [r3, #0]
 80a162c:	07d0      	lsls	r0, r2, #31
 80a162e:	bf5c      	itt	pl
 80a1630:	2201      	movpl	r2, #1
 80a1632:	601a      	strpl	r2, [r3, #0]
 80a1634:	4b16      	ldr	r3, [pc, #88]	; (80a1690 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a1636:	681a      	ldr	r2, [r3, #0]
 80a1638:	07d1      	lsls	r1, r2, #31
 80a163a:	bf5c      	itt	pl
 80a163c:	2201      	movpl	r2, #1
 80a163e:	601a      	strpl	r2, [r3, #0]
 80a1640:	4b14      	ldr	r3, [pc, #80]	; (80a1694 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a1642:	681a      	ldr	r2, [r3, #0]
 80a1644:	07d2      	lsls	r2, r2, #31
 80a1646:	bf5c      	itt	pl
 80a1648:	2201      	movpl	r2, #1
 80a164a:	601a      	strpl	r2, [r3, #0]
 80a164c:	4b12      	ldr	r3, [pc, #72]	; (80a1698 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a164e:	681a      	ldr	r2, [r3, #0]
 80a1650:	07d0      	lsls	r0, r2, #31
 80a1652:	bf5c      	itt	pl
 80a1654:	2201      	movpl	r2, #1
 80a1656:	601a      	strpl	r2, [r3, #0]
 80a1658:	4b10      	ldr	r3, [pc, #64]	; (80a169c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a165a:	681a      	ldr	r2, [r3, #0]
 80a165c:	07d1      	lsls	r1, r2, #31
 80a165e:	bf5c      	itt	pl
 80a1660:	2201      	movpl	r2, #1
 80a1662:	601a      	strpl	r2, [r3, #0]
 80a1664:	4b0e      	ldr	r3, [pc, #56]	; (80a16a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a1666:	681a      	ldr	r2, [r3, #0]
 80a1668:	07d2      	lsls	r2, r2, #31
 80a166a:	bf5c      	itt	pl
 80a166c:	2201      	movpl	r2, #1
 80a166e:	601a      	strpl	r2, [r3, #0]
 80a1670:	4770      	bx	lr
 80a1672:	bf00      	nop
 80a1674:	200008b8 	.word	0x200008b8
 80a1678:	200008b4 	.word	0x200008b4
 80a167c:	200008b0 	.word	0x200008b0
 80a1680:	200008ac 	.word	0x200008ac
 80a1684:	200008a8 	.word	0x200008a8
 80a1688:	200008a4 	.word	0x200008a4
 80a168c:	200008a0 	.word	0x200008a0
 80a1690:	2000089c 	.word	0x2000089c
 80a1694:	20000898 	.word	0x20000898
 80a1698:	20000894 	.word	0x20000894
 80a169c:	20000890 	.word	0x20000890
 80a16a0:	2000088c 	.word	0x2000088c

080a16a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a16a4:	4b24      	ldr	r3, [pc, #144]	; (80a1738 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a16a6:	681a      	ldr	r2, [r3, #0]
 80a16a8:	07d0      	lsls	r0, r2, #31
 80a16aa:	bf5c      	itt	pl
 80a16ac:	2201      	movpl	r2, #1
 80a16ae:	601a      	strpl	r2, [r3, #0]
 80a16b0:	4b22      	ldr	r3, [pc, #136]	; (80a173c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a16b2:	681a      	ldr	r2, [r3, #0]
 80a16b4:	07d1      	lsls	r1, r2, #31
 80a16b6:	bf5c      	itt	pl
 80a16b8:	2201      	movpl	r2, #1
 80a16ba:	601a      	strpl	r2, [r3, #0]
 80a16bc:	4b20      	ldr	r3, [pc, #128]	; (80a1740 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a16be:	681a      	ldr	r2, [r3, #0]
 80a16c0:	07d2      	lsls	r2, r2, #31
 80a16c2:	bf5c      	itt	pl
 80a16c4:	2201      	movpl	r2, #1
 80a16c6:	601a      	strpl	r2, [r3, #0]
 80a16c8:	4b1e      	ldr	r3, [pc, #120]	; (80a1744 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a16ca:	681a      	ldr	r2, [r3, #0]
 80a16cc:	07d0      	lsls	r0, r2, #31
 80a16ce:	bf5c      	itt	pl
 80a16d0:	2201      	movpl	r2, #1
 80a16d2:	601a      	strpl	r2, [r3, #0]
 80a16d4:	4b1c      	ldr	r3, [pc, #112]	; (80a1748 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a16d6:	681a      	ldr	r2, [r3, #0]
 80a16d8:	07d1      	lsls	r1, r2, #31
 80a16da:	bf5c      	itt	pl
 80a16dc:	2201      	movpl	r2, #1
 80a16de:	601a      	strpl	r2, [r3, #0]
 80a16e0:	4b1a      	ldr	r3, [pc, #104]	; (80a174c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a16e2:	681a      	ldr	r2, [r3, #0]
 80a16e4:	07d2      	lsls	r2, r2, #31
 80a16e6:	bf5c      	itt	pl
 80a16e8:	2201      	movpl	r2, #1
 80a16ea:	601a      	strpl	r2, [r3, #0]
 80a16ec:	4b18      	ldr	r3, [pc, #96]	; (80a1750 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a16ee:	681a      	ldr	r2, [r3, #0]
 80a16f0:	07d0      	lsls	r0, r2, #31
 80a16f2:	bf5c      	itt	pl
 80a16f4:	2201      	movpl	r2, #1
 80a16f6:	601a      	strpl	r2, [r3, #0]
 80a16f8:	4b16      	ldr	r3, [pc, #88]	; (80a1754 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a16fa:	681a      	ldr	r2, [r3, #0]
 80a16fc:	07d1      	lsls	r1, r2, #31
 80a16fe:	bf5c      	itt	pl
 80a1700:	2201      	movpl	r2, #1
 80a1702:	601a      	strpl	r2, [r3, #0]
 80a1704:	4b14      	ldr	r3, [pc, #80]	; (80a1758 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a1706:	681a      	ldr	r2, [r3, #0]
 80a1708:	07d2      	lsls	r2, r2, #31
 80a170a:	bf5c      	itt	pl
 80a170c:	2201      	movpl	r2, #1
 80a170e:	601a      	strpl	r2, [r3, #0]
 80a1710:	4b12      	ldr	r3, [pc, #72]	; (80a175c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a1712:	681a      	ldr	r2, [r3, #0]
 80a1714:	07d0      	lsls	r0, r2, #31
 80a1716:	bf5c      	itt	pl
 80a1718:	2201      	movpl	r2, #1
 80a171a:	601a      	strpl	r2, [r3, #0]
 80a171c:	4b10      	ldr	r3, [pc, #64]	; (80a1760 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a171e:	681a      	ldr	r2, [r3, #0]
 80a1720:	07d1      	lsls	r1, r2, #31
 80a1722:	bf5c      	itt	pl
 80a1724:	2201      	movpl	r2, #1
 80a1726:	601a      	strpl	r2, [r3, #0]
 80a1728:	4b0e      	ldr	r3, [pc, #56]	; (80a1764 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a172a:	681a      	ldr	r2, [r3, #0]
 80a172c:	07d2      	lsls	r2, r2, #31
 80a172e:	bf5c      	itt	pl
 80a1730:	2201      	movpl	r2, #1
 80a1732:	601a      	strpl	r2, [r3, #0]
 80a1734:	4770      	bx	lr
 80a1736:	bf00      	nop
 80a1738:	200008e8 	.word	0x200008e8
 80a173c:	200008e4 	.word	0x200008e4
 80a1740:	200008e0 	.word	0x200008e0
 80a1744:	200008dc 	.word	0x200008dc
 80a1748:	200008d8 	.word	0x200008d8
 80a174c:	200008d4 	.word	0x200008d4
 80a1750:	200008d0 	.word	0x200008d0
 80a1754:	200008cc 	.word	0x200008cc
 80a1758:	200008c8 	.word	0x200008c8
 80a175c:	200008c4 	.word	0x200008c4
 80a1760:	200008c0 	.word	0x200008c0
 80a1764:	200008bc 	.word	0x200008bc

080a1768 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a1768:	4b18      	ldr	r3, [pc, #96]	; (80a17cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a176a:	681a      	ldr	r2, [r3, #0]
 80a176c:	07d1      	lsls	r1, r2, #31
 80a176e:	bf5c      	itt	pl
 80a1770:	2201      	movpl	r2, #1
 80a1772:	601a      	strpl	r2, [r3, #0]
 80a1774:	4b16      	ldr	r3, [pc, #88]	; (80a17d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a1776:	681a      	ldr	r2, [r3, #0]
 80a1778:	07d2      	lsls	r2, r2, #31
 80a177a:	bf5c      	itt	pl
 80a177c:	2201      	movpl	r2, #1
 80a177e:	601a      	strpl	r2, [r3, #0]
 80a1780:	4b14      	ldr	r3, [pc, #80]	; (80a17d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a1782:	681a      	ldr	r2, [r3, #0]
 80a1784:	07d0      	lsls	r0, r2, #31
 80a1786:	bf5c      	itt	pl
 80a1788:	2201      	movpl	r2, #1
 80a178a:	601a      	strpl	r2, [r3, #0]
 80a178c:	4b12      	ldr	r3, [pc, #72]	; (80a17d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a178e:	681a      	ldr	r2, [r3, #0]
 80a1790:	07d1      	lsls	r1, r2, #31
 80a1792:	bf5c      	itt	pl
 80a1794:	2201      	movpl	r2, #1
 80a1796:	601a      	strpl	r2, [r3, #0]
 80a1798:	4b10      	ldr	r3, [pc, #64]	; (80a17dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a179a:	681a      	ldr	r2, [r3, #0]
 80a179c:	07d2      	lsls	r2, r2, #31
 80a179e:	bf5c      	itt	pl
 80a17a0:	2201      	movpl	r2, #1
 80a17a2:	601a      	strpl	r2, [r3, #0]
 80a17a4:	4b0e      	ldr	r3, [pc, #56]	; (80a17e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a17a6:	681a      	ldr	r2, [r3, #0]
 80a17a8:	07d0      	lsls	r0, r2, #31
 80a17aa:	bf5c      	itt	pl
 80a17ac:	2201      	movpl	r2, #1
 80a17ae:	601a      	strpl	r2, [r3, #0]
 80a17b0:	4b0c      	ldr	r3, [pc, #48]	; (80a17e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a17b2:	681a      	ldr	r2, [r3, #0]
 80a17b4:	07d1      	lsls	r1, r2, #31
 80a17b6:	bf5c      	itt	pl
 80a17b8:	2201      	movpl	r2, #1
 80a17ba:	601a      	strpl	r2, [r3, #0]
 80a17bc:	4b0a      	ldr	r3, [pc, #40]	; (80a17e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a17be:	681a      	ldr	r2, [r3, #0]
 80a17c0:	07d2      	lsls	r2, r2, #31
 80a17c2:	bf5c      	itt	pl
 80a17c4:	2201      	movpl	r2, #1
 80a17c6:	601a      	strpl	r2, [r3, #0]
 80a17c8:	4770      	bx	lr
 80a17ca:	bf00      	nop
 80a17cc:	20000908 	.word	0x20000908
 80a17d0:	20000904 	.word	0x20000904
 80a17d4:	20000900 	.word	0x20000900
 80a17d8:	200008fc 	.word	0x200008fc
 80a17dc:	200008f8 	.word	0x200008f8
 80a17e0:	200008f4 	.word	0x200008f4
 80a17e4:	200008f0 	.word	0x200008f0
 80a17e8:	200008ec 	.word	0x200008ec

080a17ec <__cxa_atexit>:
 80a17ec:	b510      	push	{r4, lr}
 80a17ee:	4c05      	ldr	r4, [pc, #20]	; (80a1804 <__cxa_atexit+0x18>)
 80a17f0:	4613      	mov	r3, r2
 80a17f2:	b12c      	cbz	r4, 80a1800 <__cxa_atexit+0x14>
 80a17f4:	460a      	mov	r2, r1
 80a17f6:	4601      	mov	r1, r0
 80a17f8:	2002      	movs	r0, #2
 80a17fa:	f3af 8000 	nop.w
 80a17fe:	bd10      	pop	{r4, pc}
 80a1800:	4620      	mov	r0, r4
 80a1802:	bd10      	pop	{r4, pc}
 80a1804:	00000000 	.word	0x00000000

080a1808 <memcpy>:
 80a1808:	b510      	push	{r4, lr}
 80a180a:	1e43      	subs	r3, r0, #1
 80a180c:	440a      	add	r2, r1
 80a180e:	4291      	cmp	r1, r2
 80a1810:	d004      	beq.n	80a181c <memcpy+0x14>
 80a1812:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a1816:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a181a:	e7f8      	b.n	80a180e <memcpy+0x6>
 80a181c:	bd10      	pop	{r4, pc}

080a181e <memset>:
 80a181e:	4603      	mov	r3, r0
 80a1820:	4402      	add	r2, r0
 80a1822:	4293      	cmp	r3, r2
 80a1824:	d002      	beq.n	80a182c <memset+0xe>
 80a1826:	f803 1b01 	strb.w	r1, [r3], #1
 80a182a:	e7fa      	b.n	80a1822 <memset+0x4>
 80a182c:	4770      	bx	lr
	...

080a1830 <srand>:
 80a1830:	b538      	push	{r3, r4, r5, lr}
 80a1832:	4b12      	ldr	r3, [pc, #72]	; (80a187c <srand+0x4c>)
 80a1834:	4605      	mov	r5, r0
 80a1836:	681c      	ldr	r4, [r3, #0]
 80a1838:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a183a:	b9d3      	cbnz	r3, 80a1872 <srand+0x42>
 80a183c:	2018      	movs	r0, #24
 80a183e:	f7fe ff23 	bl	80a0688 <malloc>
 80a1842:	f243 330e 	movw	r3, #13070	; 0x330e
 80a1846:	63a0      	str	r0, [r4, #56]	; 0x38
 80a1848:	8003      	strh	r3, [r0, #0]
 80a184a:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a184e:	8043      	strh	r3, [r0, #2]
 80a1850:	f241 2334 	movw	r3, #4660	; 0x1234
 80a1854:	8083      	strh	r3, [r0, #4]
 80a1856:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a185a:	80c3      	strh	r3, [r0, #6]
 80a185c:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a1860:	8103      	strh	r3, [r0, #8]
 80a1862:	2305      	movs	r3, #5
 80a1864:	8143      	strh	r3, [r0, #10]
 80a1866:	230b      	movs	r3, #11
 80a1868:	8183      	strh	r3, [r0, #12]
 80a186a:	2201      	movs	r2, #1
 80a186c:	2300      	movs	r3, #0
 80a186e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a1872:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a1874:	2200      	movs	r2, #0
 80a1876:	611d      	str	r5, [r3, #16]
 80a1878:	615a      	str	r2, [r3, #20]
 80a187a:	bd38      	pop	{r3, r4, r5, pc}
 80a187c:	20000374 	.word	0x20000374

080a1880 <strdup>:
 80a1880:	4b02      	ldr	r3, [pc, #8]	; (80a188c <strdup+0xc>)
 80a1882:	4601      	mov	r1, r0
 80a1884:	6818      	ldr	r0, [r3, #0]
 80a1886:	f000 b803 	b.w	80a1890 <_strdup_r>
 80a188a:	bf00      	nop
 80a188c:	20000374 	.word	0x20000374

080a1890 <_strdup_r>:
 80a1890:	b570      	push	{r4, r5, r6, lr}
 80a1892:	4606      	mov	r6, r0
 80a1894:	4608      	mov	r0, r1
 80a1896:	460c      	mov	r4, r1
 80a1898:	f000 f80d 	bl	80a18b6 <strlen>
 80a189c:	1c45      	adds	r5, r0, #1
 80a189e:	4629      	mov	r1, r5
 80a18a0:	4630      	mov	r0, r6
 80a18a2:	f7fe ff11 	bl	80a06c8 <_malloc_r>
 80a18a6:	4606      	mov	r6, r0
 80a18a8:	b118      	cbz	r0, 80a18b2 <_strdup_r+0x22>
 80a18aa:	462a      	mov	r2, r5
 80a18ac:	4621      	mov	r1, r4
 80a18ae:	f7ff ffab 	bl	80a1808 <memcpy>
 80a18b2:	4630      	mov	r0, r6
 80a18b4:	bd70      	pop	{r4, r5, r6, pc}

080a18b6 <strlen>:
 80a18b6:	4603      	mov	r3, r0
 80a18b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a18bc:	2a00      	cmp	r2, #0
 80a18be:	d1fb      	bne.n	80a18b8 <strlen+0x2>
 80a18c0:	1a18      	subs	r0, r3, r0
 80a18c2:	3801      	subs	r0, #1
 80a18c4:	4770      	bx	lr

080a18c6 <link_code_end>:
	...

080a18c8 <dynalib_user>:
 80a18c8:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a18d8:	0000 0000 6e49 6174 7463 5620 6c61 6575     ....Intact Value
 80a18e8:	4200 6f72 656b 206e 6156 756c 0065 6542     .Broken Value.Be
 80a18f8:	6d61 5420 7268 7365 6f68 646c 5000 6f68     am Threshold.Pho
 80a1908:	6f74 6572 6973 7473 726f 5620 6c61 6575     toresistor Value
 80a1918:	6900 746e 6361 0074 6562 6d61 7453 7461     .intact.beamStat
 80a1928:	7375 6200 6f72 656b 006e 0000               us.broken...

080a1934 <_ZTV8SPIClass>:
	...
 80a193c:	06d9 080a 06db 080a 0066 6e6c 6600 006e     ........f.ln.fn.
 80a194c:	6f63 6564 6400 7465 6961 006c 0a0d 2500     code.detail....%
 80a195c:	3130 7530 0020 205d 2500 0064 202c 2800     010u .] .%d., .(
 80a196c:	3a29 0020 5b20 6300 646f 2065 203d 2500     ): . [.code = .%
 80a197c:	0069 6564 6174 6c69 2073 203d 6200 7561     i.details = .bau
 80a198c:	0064 6553 6972 6c61 5500 4253 6553 6972     d.Serial.USBSeri
 80a199c:	6c61 0031 7974 6570 7000 7261 6d61 6300     al1.type.param.c
 80a19ac:	646d 6900 0064 6e68 0064 7473 6d72 6600     md.id.hnd.strm.f
 80a19bc:	6c69 0074 766c 006c 6461 4864 6e61 6c64     ilt.lvl.addHandl
 80a19cc:	7265 7200 6d65 766f 4865 6e61 6c64 7265     er.removeHandler
 80a19dc:	6500 756e 486d 6e61 6c64 7265 0073 534a     .enumHandlers.JS
 80a19ec:	4e4f 7453 6572 6d61 6f4c 4867 6e61 6c64     ONStreamLogHandl
 80a19fc:	7265 6100 7070 6e00 6e6f 0065 7274 6361     er.app.none.trac
 80a1a0c:	0065 6e69 6f66 7700 7261 006e 7265 6f72     e.info.warn.erro
 80a1a1c:	0072 6170 696e 0063 6c61 006c 005a 2b25     r.panic.all.Z.%+
 80a1a2c:	3330 3a64 3025 7532 2500 2d59 6d25 252d     03d:%02u.%Y-%m-%
 80a1a3c:	5464 4825 253a 3a4d 5325 7a25 6100 6373     dT%H:%M:%S%z.asc
 80a1a4c:	6974 656d 0000 0000                         time....

080a1a54 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a1a5c:	0b41 080a 0b47 080a 0b5d 080a 0b53 080a     A...G...]...S...
 80a1a6c:	0b43 080a                                   C...

080a1a70 <_ZTV9IPAddress>:
	...
 80a1a78:	1053 080a 1045 080a 1047 080a               S...E...G...

080a1a84 <_ZTV9USBSerial>:
	...
 80a1a8c:	10bd 080a 1101 080a 10db 080a 08cd 080a     ................
 80a1a9c:	10d5 080a 10bf 080a 10c7 080a 10fb 080a     ................
 80a1aac:	10cf 080a 10b9 080a                         ........

080a1ab4 <_ZTV11USARTSerial>:
	...
 80a1abc:	1225 080a 1249 080a 1255 080a 08cd 080a     %...I...U.......
 80a1acc:	1231 080a 123d 080a 1237 080a 1243 080a     1...=...7...C...
 80a1adc:	1227 080a 122b 080a                         '...+...

080a1ae4 <_ZTV7TwoWire>:
	...
 80a1aec:	131f 080a 1369 080a 1341 080a 1321 080a     ....i...A...!...
 80a1afc:	1349 080a 1351 080a 1359 080a 1361 080a     I...Q...Y...a...

080a1b0c <_ZTVN5spark9WiFiClassE>:
	...
 80a1b14:	13a3 080a                                   ....

080a1b18 <__sf_fake_stdin>:
	...

080a1b38 <__sf_fake_stdout>:
	...

080a1b58 <__sf_fake_stderr>:
	...
 80a1b78:	0043                                        C.

080a1b7a <link_const_variable_data_end>:
	...

080a1b7c <link_constructors_location>:
 80a1b7c:	080a03cd 	.word	0x080a03cd
 80a1b80:	080a0719 	.word	0x080a0719
 80a1b84:	080a0985 	.word	0x080a0985
 80a1b88:	080a0995 	.word	0x080a0995
 80a1b8c:	080a09ed 	.word	0x080a09ed
 80a1b90:	080a13ad 	.word	0x080a13ad
 80a1b94:	080a1499 	.word	0x080a1499
 80a1b98:	080a14dd 	.word	0x080a14dd
 80a1b9c:	080a155d 	.word	0x080a155d
 80a1ba0:	080a15e1 	.word	0x080a15e1
 80a1ba4:	080a16a5 	.word	0x080a16a5
 80a1ba8:	080a1769 	.word	0x080a1769

080a1bac <link_constructors_end>:
 80a1bac:	00000000 	.word	0x00000000
